<?php namespace {function C($name=null, $value=null,$default=null) { static $_config = array(); if (empty($name)) { return $_config; } if (is_string($name)) { if (!strpos($name, '.')) { $name = strtoupper($name); if (is_null($value)) return isset($_config[$name]) ? $_config[$name] : $default; $_config[$name] = $value; return; } $name = explode('.', $name); $name[0] = strtoupper($name[0]); if (is_null($value)) return isset($_config[$name[0]][$name[1]]) ? $_config[$name[0]][$name[1]] : $default; $_config[$name[0]][$name[1]] = $value; return; } if (is_array($name)){ $_config = array_merge($_config, array_change_key_case($name,CASE_UPPER)); return; } return null; } function load_config($file,$parse=CONF_PARSE){ $ext = pathinfo($file,PATHINFO_EXTENSION); switch($ext){ case 'php': return include $file; case 'ini': return parse_ini_file($file); case 'yaml': return yaml_parse_file($file); case 'xml': return (array)simplexml_load_file($file); case 'json': return json_decode(file_get_contents($file), true); default: if(function_exists($parse)){ return $parse($file); }else{ E(L('_NOT_SUPPERT_').':'.$ext); } } } if (!function_exists('yaml_parse_file')) { function yaml_parse_file($file) { vendor('spyc.Spyc'); return Spyc::YAMLLoad($file); } } function E($msg, $code=0) { throw new Think\Exception($msg, $code); } function G($start,$end='',$dec=4) { static $_info = array(); static $_mem = array(); if(is_float($end)) { $_info[$start] = $end; }elseif(!empty($end)){ if(!isset($_info[$end])) $_info[$end] = microtime(TRUE); if(MEMORY_LIMIT_ON && $dec=='m'){ if(!isset($_mem[$end])) $_mem[$end] = memory_get_usage(); return number_format(($_mem[$end]-$_mem[$start])/1024); }else{ return number_format(($_info[$end]-$_info[$start]),$dec); } }else{ $_info[$start] = microtime(TRUE); if(MEMORY_LIMIT_ON) $_mem[$start] = memory_get_usage(); } } function L($name=null, $value=null) { static $_lang = array(); if (empty($name)) return $_lang; if (is_string($name)) { $name = strtoupper($name); if (is_null($value)){ return isset($_lang[$name]) ? $_lang[$name] : $name; }elseif(is_array($value)){ $replace = array_keys($value); foreach($replace as &$v){ $v = '{$'.$v.'}'; } return str_replace($replace,$value,isset($_lang[$name]) ? $_lang[$name] : $name); } $_lang[$name] = $value; return; } if (is_array($name)) $_lang = array_merge($_lang, array_change_key_case($name, CASE_UPPER)); return; } function trace($value='[think]',$label='',$level='DEBUG',$record=false) { return Think\Think::trace($value,$label,$level,$record); } function compile($filename) { $content = php_strip_whitespace($filename); $content = trim(substr($content, 5)); $content = preg_replace('/\/\/\[RUNTIME\](.*?)\/\/\[\/RUNTIME\]/s', '', $content); if(0===strpos($content,'namespace')){ $content = preg_replace('/namespace\s(.*?);/','namespace \\1{',$content,1); }else{ $content = 'namespace {'.$content; } if ('?>' == substr($content, -2)) $content = substr($content, 0, -2); return $content.'}'; } function T($template='',$layer=''){ if(false === strpos($template,'://')){ $template = 'http://'.str_replace(':', '/',$template); } $info = parse_url($template); $file = $info['host'].(isset($info['path'])?$info['path']:''); $module = isset($info['user'])?$info['user'].'/':MODULE_NAME.'/'; $extend = $info['scheme']; $layer = $layer?$layer:C('DEFAULT_V_LAYER'); $auto = C('AUTOLOAD_NAMESPACE'); if($auto && isset($auto[$extend])){ $baseUrl = $auto[$extend].$module.$layer.'/'; }elseif(C('VIEW_PATH')){ $baseUrl = C('VIEW_PATH'); }elseif(defined('TMPL_PATH')){ $baseUrl = TMPL_PATH.$module; }else{ $baseUrl = APP_PATH.$module.$layer.'/'; } $theme = substr_count($file,'/')<2 ? C('DEFAULT_THEME') : ''; $depr = C('TMPL_FILE_DEPR'); if('' == $file) { $file = CONTROLLER_NAME . $depr . ACTION_NAME; }elseif(false === strpos($file, '/')){ $file = CONTROLLER_NAME . $depr . $file; }elseif('/' != $depr){ $file = substr_count($file,'/')>1 ? substr_replace($file,$depr,strrpos($file,'/'),1) : str_replace('/', $depr, $file); } return $baseUrl.($theme?$theme.'/':'').$file.C('TMPL_TEMPLATE_SUFFIX'); } function I($name,$default='',$filter=null,$datas=null) { if(strpos($name,'.')) { list($method,$name) = explode('.',$name,2); }else{ $method = 'param'; } switch(strtolower($method)) { case 'get' : $input =& $_GET;break; case 'post' : $input =& $_POST;break; case 'put' : parse_str(file_get_contents('php://input'), $input);break; case 'param' : switch($_SERVER['REQUEST_METHOD']) { case 'POST': $input = $_POST; break; case 'PUT': parse_str(file_get_contents('php://input'), $input); break; default: $input = $_GET; } break; case 'path' : $input = array(); if(!empty($_SERVER['PATH_INFO'])){ $depr = C('URL_PATHINFO_DEPR'); $input = explode($depr,trim($_SERVER['PATH_INFO'],$depr)); } break; case 'request' : $input =& $_REQUEST; break; case 'session' : $input =& $_SESSION; break; case 'cookie' : $input =& $_COOKIE; break; case 'server' : $input =& $_SERVER; break; case 'globals' : $input =& $GLOBALS; break; case 'data' : $input =& $datas; break; default: return NULL; } if(''==$name) { $data = $input; $filters = isset($filter)?$filter:C('DEFAULT_FILTER'); if($filters) { if(is_string($filters)){ $filters = explode(',',$filters); } foreach($filters as $filter){ $data = array_map_recursive($filter,$data); } } }elseif(isset($input[$name])) { $data = $input[$name]; $filters = isset($filter)?$filter:C('DEFAULT_FILTER'); if($filters) { if(is_string($filters)){ $filters = explode(',',$filters); }elseif(is_int($filters)){ $filters = array($filters); } foreach($filters as $filter){ if(function_exists($filter)) { $data = is_array($data)?array_map_recursive($filter,$data):$filter($data); }else{ $data = filter_var($data,is_int($filter)?$filter:filter_id($filter)); if(false === $data) { return isset($default)?$default:NULL; } } } } }else{ $data = isset($default)?$default:NULL; } is_array($data) && array_walk_recursive($data,'think_filter'); return $data; } function array_map_recursive($filter, $data) { $result = array(); foreach ($data as $key => $val) { $result[$key] = is_array($val) ? array_map_recursive($filter, $val) : call_user_func($filter, $val); } return $result; } function N($key, $step=0,$save=false) { static $_num = array(); if (!isset($_num[$key])) { $_num[$key] = (false !== $save)? S('N_'.$key) : 0; } if (empty($step)) return $_num[$key]; else $_num[$key] = $_num[$key] + (int) $step; if(false !== $save){ S('N_'.$key,$_num[$key],$save); } } function parse_name($name, $type=0) { if ($type) { return ucfirst(preg_replace_callback('/_([a-zA-Z])/', function($match){return strtoupper($match[1]);}, $name)); } else { return strtolower(trim(preg_replace("/[A-Z]/", "_\\0", $name), "_")); } } function require_cache($filename) { static $_importFiles = array(); if (!isset($_importFiles[$filename])) { if (file_exists_case($filename)) { require $filename; $_importFiles[$filename] = true; } else { $_importFiles[$filename] = false; } } return $_importFiles[$filename]; } function file_exists_case($filename) { if (is_file($filename)) { if (IS_WIN && APP_DEBUG) { if (basename(realpath($filename)) != basename($filename)) return false; } return true; } return false; } function import($class, $baseUrl = '', $ext=EXT) { static $_file = array(); $class = str_replace(array('.', '#'), array('/', '.'), $class); if (isset($_file[$class . $baseUrl])) return true; else $_file[$class . $baseUrl] = true; $class_strut = explode('/', $class); if (empty($baseUrl)) { if ('@' == $class_strut[0] || MODULE_NAME == $class_strut[0]) { $baseUrl = MODULE_PATH; $class = substr_replace($class, '', 0, strlen($class_strut[0]) + 1); }elseif (in_array($class_strut[0],array('Think','Org','Behavior','Com','Vendor')) || is_dir(LIB_PATH.$class_strut[0])) { $baseUrl = LIB_PATH; }else { $baseUrl = APP_PATH; } } if (substr($baseUrl, -1) != '/') $baseUrl .= '/'; $classfile = $baseUrl . $class . $ext; if (!class_exists(basename($class),false)) { return require_cache($classfile); } } function load($name, $baseUrl='', $ext='.php') { $name = str_replace(array('.', '#'), array('/', '.'), $name); if (empty($baseUrl)) { if (0 === strpos($name, '@/')) { $baseUrl = MODULE_PATH.'Common/'; $name = substr($name, 2); } else { $array = explode('/', $name); $baseUrl = APP_PATH . array_shift($array).'/Common/'; $name = implode('/',$array); } } if (substr($baseUrl, -1) != '/') $baseUrl .= '/'; require_cache($baseUrl . $name . $ext); } function vendor($class, $baseUrl = '', $ext='.php') { if (empty($baseUrl)) $baseUrl = VENDOR_PATH; return import($class, $baseUrl, $ext); } function D($name='',$layer='') { if(empty($name)) return new Think\Model; static $_model = array(); $layer = $layer? : C('DEFAULT_M_LAYER'); if(isset($_model[$name.$layer])) return $_model[$name.$layer]; $class = parse_res_name($name,$layer); if(class_exists($class)) { $model = new $class(basename($name)); }elseif(false === strpos($name,'/')){ if(!C('APP_USE_NAMESPACE')){ import('Common/'.$layer.'/'.$class); }else{ $class = '\\Common\\'.$layer.'\\'.$name.$layer; } $model = class_exists($class)? new $class($name) : new Think\Model($name); }else { Think\Log::record('D方法实例化没找到模型类'.$class,Think\Log::NOTICE); $model = new Think\Model(basename($name)); } $_model[$name.$layer] = $model; return $model; } function M($name='', $tablePrefix='',$connection='') { static $_model = array(); if(strpos($name,':')) { list($class,$name) = explode(':',$name); }else{ $class = 'Think\\Model'; } $guid = (is_array($connection)?implode('',$connection):$connection).$tablePrefix . $name . '_' . $class; if (!isset($_model[$guid])) $_model[$guid] = new $class($name,$tablePrefix,$connection); return $_model[$guid]; } function parse_res_name($name,$layer,$level=1){ if(strpos($name,'://')) { list($extend,$name) = explode('://',$name); }else{ $extend = ''; } if(strpos($name,'/') && substr_count($name, '/')>=$level){ list($module,$name) = explode('/',$name,2); }else{ $module = MODULE_NAME; } $array = explode('/',$name); if(!C('APP_USE_NAMESPACE')){ $class = parse_name($name, 1); import($module.'/'.$layer.'/'.$class.$layer); }else{ $class = $module.'\\'.$layer; foreach($array as $name){ $class .= '\\'.parse_name($name, 1); } if($extend){ $class = $extend.'\\'.$class; } } return $class.$layer; } function controller($name,$path=''){ $layer = C('DEFAULT_C_LAYER'); if(!C('APP_USE_NAMESPACE')){ $class = parse_name($name, 1).$layer; import(MODULE_NAME.'/'.$layer.'/'.$class); }else{ $class = MODULE_NAME.'\\'.($path?$path.'\\':'').$layer; $array = explode('/',$name); foreach($array as $name){ $class .= '\\'.parse_name($name, 1); } $class .= $layer; } if(class_exists($class)) { return new $class(); }else { return false; } } function A($name,$layer='',$level='') { static $_action = array(); $layer = $layer? : C('DEFAULT_C_LAYER'); $level = $level? : ($layer == C('DEFAULT_C_LAYER')?C('CONTROLLER_LEVEL'):1); if(isset($_action[$name.$layer])) return $_action[$name.$layer]; $class = parse_res_name($name,$layer,$level); if(class_exists($class)) { $action = new $class(); $_action[$name.$layer] = $action; return $action; }else { return false; } } function R($url,$vars=array(),$layer='') { $info = pathinfo($url); $action = $info['basename']; $module = $info['dirname']; $class = A($module,$layer); if($class){ if(is_string($vars)) { parse_str($vars,$vars); } return call_user_func_array(array(&$class,$action.C('ACTION_SUFFIX')),$vars); }else{ return false; } } function tag($tag, &$params=NULL) { return \Think\Hook::listen($tag,$params); } function B($name, $tag='',&$params=NULL) { if(''==$tag){ $name .= 'Behavior'; } return \Think\Hook::exec($name,$tag,$params); } function strip_whitespace($content) { $stripStr = ''; $tokens = token_get_all($content); $last_space = false; for ($i = 0, $j = count($tokens); $i < $j; $i++) { if (is_string($tokens[$i])) { $last_space = false; $stripStr .= $tokens[$i]; } else { switch ($tokens[$i][0]) { case T_COMMENT: case T_DOC_COMMENT: break; case T_WHITESPACE: if (!$last_space) { $stripStr .= ' '; $last_space = true; } break; case T_START_HEREDOC: $stripStr .= "<<<THINK\n"; break; case T_END_HEREDOC: $stripStr .= "THINK;\n"; for($k = $i+1; $k < $j; $k++) { if(is_string($tokens[$k]) && $tokens[$k] == ';') { $i = $k; break; } else if($tokens[$k][0] == T_CLOSE_TAG) { break; } } break; default: $last_space = false; $stripStr .= $tokens[$i][1]; } } } return $stripStr; } function throw_exception($msg, $type='Think\\Exception', $code=0) { Think\Log::record('建议使用E方法替代throw_exception',Think\Log::NOTICE); if (class_exists($type, false)) throw new $type($msg, $code); else Think\Think::halt($msg); } function dump($var, $echo=true, $label=null, $strict=true) { $label = ($label === null) ? '' : rtrim($label) . ' '; if (!$strict) { if (ini_get('html_errors')) { $output = print_r($var, true); $output = '<pre>' . $label . htmlspecialchars($output, ENT_QUOTES) . '</pre>'; } else { $output = $label . print_r($var, true); } } else { ob_start(); var_dump($var); $output = ob_get_clean(); if (!extension_loaded('xdebug')) { $output = preg_replace('/\]\=\>\n(\s+)/m', '] => ', $output); $output = '<pre>' . $label . htmlspecialchars($output, ENT_QUOTES) . '</pre>'; } } if ($echo) { echo($output); return null; }else return $output; } function _echo($var, $echo=true, $label=null, $strict=true) { $label = ($label === null) ? '' : rtrim($label) . ' '; if (!$strict) { if (ini_get('html_errors')) { $output = print_r($var, true); $output = '<pre>' . $label . htmlspecialchars($output, ENT_QUOTES) . '</pre>'; } else { $output = $label . print_r($var, true); } } else { ob_start(); var_dump($var); $output = ob_get_clean(); if (!extension_loaded('xdebug')) { $output = preg_replace('/\]\=\>\n(\s+)/m', '] => ', $output); $output = '<pre>' . $label . htmlspecialchars($output, ENT_QUOTES) . '</pre>'; } } if ($echo) { echo($output); return null; }else return $output; } function layout($layout) { if(false !== $layout) { C('LAYOUT_ON',true); if(is_string($layout)) { C('LAYOUT_NAME',$layout); } }else{ C('LAYOUT_ON',false); } } function U($url='',$vars='',$suffix=true,$domain=false) { $info = parse_url($url); $url = !empty($info['path'])?$info['path']:ACTION_NAME; if(isset($info['fragment'])) { $anchor = $info['fragment']; if(false !== strpos($anchor,'?')) { list($anchor,$info['query']) = explode('?',$anchor,2); } if(false !== strpos($anchor,'@')) { list($anchor,$host) = explode('@',$anchor, 2); } }elseif(false !== strpos($url,'@')) { list($url,$host) = explode('@',$info['path'], 2); } if(isset($host)) { $domain = $host.(strpos($host,'.')?'':strstr($_SERVER['HTTP_HOST'],'.')); }elseif($domain===true){ $domain = $_SERVER['HTTP_HOST']; if(C('APP_SUB_DOMAIN_DEPLOY') ) { $domain = $domain=='localhost'?'localhost':'www'.strstr($_SERVER['HTTP_HOST'],'.'); foreach (C('APP_SUB_DOMAIN_RULES') as $key => $rule) { $rule = is_array($rule)?$rule[0]:$rule; if(false === strpos($key,'*') && 0=== strpos($url,$rule)) { $domain = $key.strstr($domain,'.'); $url = substr_replace($url,'',0,strlen($rule)); break; } } } } if(is_string($vars)) { parse_str($vars,$vars); }elseif(!is_array($vars)){ $vars = array(); } if(isset($info['query'])) { parse_str($info['query'],$params); $vars = array_merge($params,$vars); } $depr = C('URL_PATHINFO_DEPR'); $urlCase = C('URL_CASE_INSENSITIVE'); if($url) { if(0=== strpos($url,'/')) { $route = true; $url = substr($url,1); if('/' != $depr) { $url = str_replace('/',$depr,$url); } }else{ if('/' != $depr) { $url = str_replace('/',$depr,$url); } $url = trim($url,$depr); $path = explode($depr,$url); $var = array(); $varModule = C('VAR_MODULE'); $varController = C('VAR_CONTROLLER'); $varAction = C('VAR_ACTION'); $var[$varAction] = !empty($path)?array_pop($path):ACTION_NAME; $var[$varController] = !empty($path)?array_pop($path):CONTROLLER_NAME; if($maps = C('URL_ACTION_MAP')) { if(isset($maps[strtolower($var[$varController])])) { $maps = $maps[strtolower($var[$varController])]; if($action = array_search(strtolower($var[$varAction]),$maps)){ $var[$varAction] = $action; } } } if($maps = C('URL_CONTROLLER_MAP')) { if($controller = array_search(strtolower($var[$varController]),$maps)){ $var[$varController] = $controller; } } if($urlCase) { $var[$varController] = parse_name($var[$varController]); } $module = ''; if(!empty($path)) { $var[$varModule] = implode($depr,$path); }else{ if(C('MULTI_MODULE')) { if(MODULE_NAME != C('DEFAULT_MODULE') || !C('MODULE_ALLOW_LIST')){ $var[$varModule]= MODULE_NAME; } } } if($maps = C('URL_MODULE_MAP')) { if($_module = array_search(strtolower($var[$varModule]),$maps)){ $var[$varModule] = $_module; } } if(isset($var[$varModule])){ $module = $var[$varModule]; unset($var[$varModule]); } } } if(C('URL_MODEL') == 0) { $url = __APP__.'?'.C('VAR_MODULE')."={$module}&".http_build_query(array_reverse($var)); if($urlCase){ $url = strtolower($url); } if(!empty($vars)) { $vars = http_build_query($vars); $url .= '&'.$vars; } }else{ if(isset($route)) { $url = __APP__.'/'.rtrim($url,$depr); }else{ $module = (defined('BIND_MODULE') && BIND_MODULE==$module )? '' : $module; $url = __APP__.'/'.($module?$module.MODULE_PATHINFO_DEPR:'').implode($depr,array_reverse($var)); } if($urlCase){ $url = strtolower($url); } if(!empty($vars)) { foreach ($vars as $var => $val){ if('' !== trim($val)) $url .= $depr . $var . $depr . urlencode($val); } } if($suffix) { $suffix = $suffix===true?C('URL_HTML_SUFFIX'):$suffix; if($pos = strpos($suffix, '|')){ $suffix = substr($suffix, 0, $pos); } if($suffix && '/' != substr($url,-1)){ $url .= '.'.ltrim($suffix,'.'); } } } if(isset($anchor)){ $url .= '#'.$anchor; } if($domain) { $url = (is_ssl()?'https://':'http://').$domain.$url; } return $url; } function W($name, $data=array()) { return R($name,$data,'Widget'); } function is_ssl() { if(isset($_SERVER['HTTPS']) && ('1' == $_SERVER['HTTPS'] || 'on' == strtolower($_SERVER['HTTPS']))){ return true; }elseif(isset($_SERVER['SERVER_PORT']) && ('443' == $_SERVER['SERVER_PORT'] )) { return true; } return false; } function redirect($url, $time=0, $msg='') { $url = str_replace(array("\n", "\r"), '', $url); if (empty($msg)) $msg = "系统将在{$time}秒之后自动跳转到{$url}！"; if (!headers_sent()) { if (0 === $time) { header('Location: ' . $url); } else { header("refresh:{$time};url={$url}"); echo($msg); } exit(); } else { $str = "<meta http-equiv='Refresh' content='{$time};URL={$url}'>"; if ($time != 0) $str .= $msg; exit($str); } } function S($name,$value='',$options=null) { static $cache = ''; if(is_array($options) && empty($cache)){ $type = isset($options['type'])?$options['type']:''; $cache = Think\Cache::getInstance($type,$options); }elseif(is_array($name)) { $type = isset($name['type'])?$name['type']:''; $cache = Think\Cache::getInstance($type,$name); return $cache; }elseif(empty($cache)) { $cache = Think\Cache::getInstance(); } if(''=== $value){ return $cache->get($name); }elseif(is_null($value)) { return $cache->rm($name); }else { if(is_array($options)) { $expire = isset($options['expire'])?$options['expire']:NULL; }else{ $expire = is_numeric($options)?$options:NULL; } return $cache->set($name, $value, $expire); } } function F($name, $value='', $path=DATA_PATH) { static $_cache = array(); $filename = $path . $name . '.php'; if ('' !== $value) { if (is_null($value)) { if(false !== strpos($name,'*')){ return false; }else{ unset($_cache[$name]); return Think\Storage::unlink($filename,'F'); } } else { Think\Storage::put($filename,serialize($value),'F'); $_cache[$name] = $value; return ; } } if (isset($_cache[$name])) return $_cache[$name]; if (Think\Storage::has($filename,'F')){ $value = unserialize(Think\Storage::read($filename,'F')); $_cache[$name] = $value; } else { $value = false; } return $value; } function to_guid_string($mix) { if (is_object($mix)) { return spl_object_hash($mix); } elseif (is_resource($mix)) { $mix = get_resource_type($mix) . strval($mix); } else { $mix = serialize($mix); } return md5($mix); } function xml_encode($data, $root='think', $item='item', $attr='', $id='id', $encoding='utf-8') { if(is_array($attr)){ $_attr = array(); foreach ($attr as $key => $value) { $_attr[] = "{$key}=\"{$value}\""; } $attr = implode(' ', $_attr); } $attr = trim($attr); $attr = empty($attr) ? '' : " {$attr}"; $xml = "<?xml version=\"1.0\" encoding=\"{$encoding}\"?>"; $xml .= "<{$root}{$attr}>"; $xml .= data_to_xml($data, $item, $id); $xml .= "</{$root}>"; return $xml; } function data_to_xml($data, $item='item', $id='id') { $xml = $attr = ''; foreach ($data as $key => $val) { if(is_numeric($key)){ $id && $attr = " {$id}=\"{$key}\""; $key = $item; } $xml .= "<{$key}{$attr}>"; $xml .= (is_array($val) || is_object($val)) ? data_to_xml($val, $item, $id) : $val; $xml .= "</{$key}>"; } return $xml; } function session($name='',$value='') { $prefix = C('SESSION_PREFIX'); if(is_array($name)) { if(isset($name['prefix'])) C('SESSION_PREFIX',$name['prefix']); if(C('VAR_SESSION_ID') && isset($_REQUEST[C('VAR_SESSION_ID')])){ session_id($_REQUEST[C('VAR_SESSION_ID')]); }elseif(isset($name['id'])) { session_id($name['id']); } if('common' != APP_MODE){ ini_set('session.auto_start', 0); } if(isset($name['name'])) session_name($name['name']); if(isset($name['path'])) session_save_path($name['path']); if(isset($name['domain'])) ini_set('session.cookie_domain', $name['domain']); if(isset($name['expire'])) ini_set('session.gc_maxlifetime', $name['expire']); if(isset($name['use_trans_sid'])) ini_set('session.use_trans_sid', $name['use_trans_sid']?1:0); if(isset($name['use_cookies'])) ini_set('session.use_cookies', $name['use_cookies']?1:0); if(isset($name['cache_limiter'])) session_cache_limiter($name['cache_limiter']); if(isset($name['cache_expire'])) session_cache_expire($name['cache_expire']); if(isset($name['type'])) C('SESSION_TYPE',$name['type']); if(C('SESSION_TYPE')) { $type = C('SESSION_TYPE'); $class = strpos($type,'\\')? $type : 'Think\\Session\\Driver\\'. ucwords(strtolower($type)); $hander = new $class(); session_set_save_handler( array(&$hander,"open"), array(&$hander,"close"), array(&$hander,"read"), array(&$hander,"write"), array(&$hander,"destroy"), array(&$hander,"gc")); } if(C('SESSION_AUTO_START')) session_start(); }elseif('' === $value){ if(''===$name){ return $prefix ? $_SESSION[$prefix] : $_SESSION; }elseif(0===strpos($name,'[')) { if('[pause]'==$name){ session_write_close(); }elseif('[start]'==$name){ session_start(); }elseif('[destroy]'==$name){ $_SESSION = array(); session_unset(); session_destroy(); }elseif('[regenerate]'==$name){ session_regenerate_id(); } }elseif(0===strpos($name,'?')){ $name = substr($name,1); if(strpos($name,'.')){ list($name1,$name2) = explode('.',$name); return $prefix?isset($_SESSION[$prefix][$name1][$name2]):isset($_SESSION[$name1][$name2]); }else{ return $prefix?isset($_SESSION[$prefix][$name]):isset($_SESSION[$name]); } }elseif(is_null($name)){ if($prefix) { unset($_SESSION[$prefix]); }else{ $_SESSION = array(); } }elseif($prefix){ if(strpos($name,'.')){ list($name1,$name2) = explode('.',$name); return isset($_SESSION[$prefix][$name1][$name2])?$_SESSION[$prefix][$name1][$name2]:null; }else{ return isset($_SESSION[$prefix][$name])?$_SESSION[$prefix][$name]:null; } }else{ if(strpos($name,'.')){ list($name1,$name2) = explode('.',$name); return isset($_SESSION[$name1][$name2])?$_SESSION[$name1][$name2]:null; }else{ return isset($_SESSION[$name])?$_SESSION[$name]:null; } } }elseif(is_null($value)){ if($prefix){ unset($_SESSION[$prefix][$name]); }else{ unset($_SESSION[$name]); } }else{ if($prefix){ if (!isset($_SESSION[$prefix])) { $_SESSION[$prefix] = array(); } $_SESSION[$prefix][$name] = $value; }else{ $_SESSION[$name] = $value; } } } function cookie($name='', $value='', $option=null) { $config = array( 'prefix' => C('COOKIE_PREFIX'), 'expire' => C('COOKIE_EXPIRE'), 'path' => C('COOKIE_PATH'), 'domain' => C('COOKIE_DOMAIN'), 'httponly' => C('COOKIE_HTTPONLY'), ); if (!is_null($option)) { if (is_numeric($option)) $option = array('expire' => $option); elseif (is_string($option)) parse_str($option, $option); $config = array_merge($config, array_change_key_case($option)); } if(!empty($config['httponly'])){ ini_set("session.cookie_httponly", 1); } if (is_null($name)) { if (empty($_COOKIE)) return; $prefix = empty($value) ? $config['prefix'] : $value; if (!empty($prefix)) { foreach ($_COOKIE as $key => $val) { if (0 === stripos($key, $prefix)) { setcookie($key, '', time() - 3600, $config['path'], $config['domain']); unset($_COOKIE[$key]); } } } return; }elseif('' === $name){ return $_COOKIE; } $name = $config['prefix'] . str_replace('.', '_', $name); if ('' === $value) { if(isset($_COOKIE[$name])){ $value = $_COOKIE[$name]; if(0===strpos($value,'think:')){ $value = substr($value,6); return array_map('urldecode',json_decode(MAGIC_QUOTES_GPC?stripslashes($value):$value,true)); }else{ return $value; } }else{ return null; } } else { if (is_null($value)) { setcookie($name, '', time() - 3600, $config['path'], $config['domain']); unset($_COOKIE[$name]); } else { if(is_array($value)){ $value = 'think:'.json_encode(array_map('urlencode',$value)); } $expire = !empty($config['expire']) ? time() + intval($config['expire']) : 0; setcookie($name, $value, $expire, $config['path'], $config['domain']); $_COOKIE[$name] = $value; } } } function load_ext_file($path) { if($files = C('LOAD_EXT_FILE')) { $files = explode(',',$files); foreach ($files as $file){ $file = $path.'Common/'.$file.'.php'; if(is_file($file)) include $file; } } if($configs = C('LOAD_EXT_CONFIG')) { if(is_string($configs)) $configs = explode(',',$configs); foreach ($configs as $key=>$config){ $file = $path.'Conf/'.$config.CONF_EXT; if(is_file($file)) { is_numeric($key)?C(load_config($file)):C($key,load_config($file)); } } } } function get_client_ip($type = 0,$adv=false) { $type = $type ? 1 : 0; static $ip = NULL; if ($ip !== NULL) return $ip[$type]; if($adv){ if (isset($_SERVER['HTTP_X_FORWARDED_FOR'])) { $arr = explode(',', $_SERVER['HTTP_X_FORWARDED_FOR']); $pos = array_search('unknown',$arr); if(false !== $pos) unset($arr[$pos]); $ip = trim($arr[0]); }elseif (isset($_SERVER['HTTP_CLIENT_IP'])) { $ip = $_SERVER['HTTP_CLIENT_IP']; }elseif (isset($_SERVER['REMOTE_ADDR'])) { $ip = $_SERVER['REMOTE_ADDR']; } }elseif (isset($_SERVER['REMOTE_ADDR'])) { $ip = $_SERVER['REMOTE_ADDR']; } $long = sprintf("%u",ip2long($ip)); $ip = $long ? array($ip, $long) : array('0.0.0.0', 0); return $ip[$type]; } function send_http_status($code) { static $_status = array( 100 => 'Continue', 101 => 'Switching Protocols', 200 => 'OK', 201 => 'Created', 202 => 'Accepted', 203 => 'Non-Authoritative Information', 204 => 'No Content', 205 => 'Reset Content', 206 => 'Partial Content', 300 => 'Multiple Choices', 301 => 'Moved Permanently', 302 => 'Moved Temporarily ', 303 => 'See Other', 304 => 'Not Modified', 305 => 'Use Proxy', 307 => 'Temporary Redirect', 400 => 'Bad Request', 401 => 'Unauthorized', 402 => 'Payment Required', 403 => 'Forbidden', 404 => 'Not Found', 405 => 'Method Not Allowed', 406 => 'Not Acceptable', 407 => 'Proxy Authentication Required', 408 => 'Request Timeout', 409 => 'Conflict', 410 => 'Gone', 411 => 'Length Required', 412 => 'Precondition Failed', 413 => 'Request Entity Too Large', 414 => 'Request-URI Too Long', 415 => 'Unsupported Media Type', 416 => 'Requested Range Not Satisfiable', 417 => 'Expectation Failed', 500 => 'Internal Server Error', 501 => 'Not Implemented', 502 => 'Bad Gateway', 503 => 'Service Unavailable', 504 => 'Gateway Timeout', 505 => 'HTTP Version Not Supported', 509 => 'Bandwidth Limit Exceeded' ); if(isset($_status[$code])) { header('HTTP/1.1 '.$code.' '.$_status[$code]); header('Status:'.$code.' '.$_status[$code]); } } function in_array_case($value,$array){ return in_array(strtolower($value),array_map('strtolower',$array)); } function think_filter(&$value){ if(preg_match('/^(EXP|NEQ|GT|EGT|LT|ELT|OR|LIKE|NOTLIKE|NOTBETWEEN|NOT BETWEEN|BETWEEN|NOTIN|NOT IN|IN)$/i',$value)){ $value .= ' '; } } function auto_charset($fContents, $from='gbk', $to='utf-8') { $from = strtoupper($from) == 'UTF8' ? 'utf-8' : $from; $to = strtoupper($to) == 'UTF8' ? 'utf-8' : $to; if (strtoupper($from) === strtoupper($to) || empty($fContents) || (is_scalar($fContents) && !is_string($fContents))) { return $fContents; } if (is_string($fContents)) { if (function_exists('mb_convert_encoding')) { return mb_convert_encoding($fContents, $to, $from); } elseif (function_exists('iconv')) { return iconv($from, $to, $fContents); } else { return $fContents; } } elseif (is_array($fContents)) { foreach ($fContents as $key => $val) { $_key = auto_charset($key, $from, $to); $fContents[$_key] = auto_charset($val, $from, $to); if ($key != $_key) unset($fContents[$key]); } return $fContents; } else { return $fContents; } }}namespace {function getfirstchar($s0){ return gxl_letter_first($s0); } function getfile($url){ return gxl_file_get_contents($url); } function getreurl($listurl){ return gxl_krsort_url($listurl); } function getpicurl($file){ return gxl_img_url($file); } function getemplateayurl($tingid){ return gxl_play_url($tingid,0,1); } function getletter($file='ting',$str=''){ return gxl_letter_url($file='ting',$str=''); } function gxl_mytpl_url($tplname){ $tplname = str_replace(array('my_','.html'),'',$tplname); if(C('url_html')){ return C('site_path').C('url_mytpl').$tplname.C('html_file_suffix'); } return UU('Home-my/show',array('id'=>trim($tplname)),true,false); print_r($tplname) ; } function read_file($l1){ $ctx = stream_context_create(array('http'=>array('timeout'=>30))); return @file_get_contents($l1, 0, $ctx); } function write_file($l1, $l2=''){ $dir = dirname($l1); if(!is_dir($dir)){ mkdirss($dir); } return @file_put_contents($l1, $l2); } function mkdirss($dirs,$mode=0777) { if(!is_dir($dirs)){ mkdirss(dirname($dirs), $mode); return @mkdir($dirs, $mode); } return true; } function arr2file($filename, $arr=''){ if(is_array($arr)){ $con = var_export($arr,true); } else{ $con = $arr; } $con = "<?php\nreturn $con;\n?>"; write_file($filename, $con); } function get_http_url(){ return htmlspecialchars("http://".$_SERVER['HTTP_HOST'].$_SERVER["REQUEST_URI"]); } function get_site_path($filename){ $basepath = $_SERVER['PHP_SELF']; $basepath = substr($basepath,0,strpos($basepath,$filename)); return $basepath; } function get_base_url($baseurl,$url){ if("#" == $url){ return ""; }elseif(FALSE !== stristr($url,"http://")){ return $url; }elseif( "/" == substr($url,0,1) ){ $tmp = parse_url($baseurl); return $tmp["scheme"]."://".$tmp["host"].$url; }else{ $tmp = pathinfo($baseurl); return $tmp["dirname"]."/".$url; } } function get_domain($url){ preg_match("|http://(.*)\/|isU", $url, $arr_domain); return $arr_domain[1]; } function u2g($str){ return iconv("UTF-8","GBK",$str); } function g2u($str){ return iconv("GBK","UTF-8//ignore",$str); } function t2js($l1, $l2=1){ $I1 = str_replace(array("\r", "\n"), array('', '\n'), addslashes($l1)); return $l2 ? "document.write(\"$I1\");" : $I1; } function nr($str){ $str = str_replace(array("<nr/>","<rr/>"),array("\n","\r"),$str); return trim($str); } function nb($str){ $str = str_replace("　",' ',str_replace("&nbsp;",' ',$str)); $str = eregi_replace("/\n{2,}/",' ',$str); return trim($str); } function msubstr($str, $start=0, $length, $suffix=false){ return gxl_msubstr(eregi_replace('<[^>]+>','',eregi_replace("[\r\n\t ]{1,}",' ',nb($str))),$start,$length,'utf-8',$suffix); } function gxl_msubstr($str, $start=0, $length, $charset="utf-8", $suffix=true){ $re['utf-8'] = "/[\x01-\x7f]|[\xc2-\xdf][\x80-\xbf]|[\xe0-\xef][\x80-\xbf]{2}|[\xf0-\xff][\x80-\xbf]{3}/"; $re['gb2312'] = "/[\x01-\x7f]|[\xb0-\xf7][\xa0-\xfe]/"; $re['gbk'] = "/[\x01-\x7f]|[\x81-\xfe][\x40-\xfe]/"; $re['big5'] = "/[\x01-\x7f]|[\x81-\xfe]([\x40-\x7e]|\xa1-\xfe])/"; preg_match_all($re[$charset], $str, $match); $length_new = $length; for($i=$start; $i<$length; $i++){ if (ord($match[0][$i]) > 0xa0){ }else{ $length_new++; $length_chi++; } } if($length_chi<$length){ $length_new = $length+($length_chi/2); } $slice = join("",array_slice($match[0], $start, $length_new)); if($suffix && $slice != $str){ return $slice."…"; } return $slice; } function gxl_pinyin($str,$ishead=0,$isclose=1){ $str = u2g($str); global $pinyins; $restr = ''; $str = trim($str); $slen = strlen($str); if($slen<2){ return $str; } if(count($pinyins)==0){ $fp = fopen('./Lib/Conf/pinyin.dat','r'); while(!feof($fp)){ $line = trim(fgets($fp)); $pinyins[$line[0].$line[1]] = substr($line,3,strlen($line)-3); } fclose($fp); } for($i=0;$i<$slen;$i++){ if(ord($str[$i])>0x80){ $c = $str[$i].$str[$i+1]; $i++; if(isset($pinyins[$c])){ if($ishead==0){ $restr .= $pinyins[$c]; } else{ $restr .= $pinyins[$c][0]; } }else{ } }else if( eregi("[a-z0-9]",$str[$i]) ){ $restr .= $str[$i]; } else{ } } if($isclose==0){ unset($pinyins); } return $restr; } function gxl_letter_first($s0){ $firstchar_ord=ord(strtoupper($s0{0})); if (($firstchar_ord>=65 and $firstchar_ord<=91)or($firstchar_ord>=48 and $firstchar_ord<=57)) return $s0{0}; $s=iconv("UTF-8","gb2312", $s0); $asc=ord($s{0})*256+ord($s{1})-65536; if($asc>=-20319 and $asc<=-20284)return "A"; if($asc>=-20283 and $asc<=-19776)return "B"; if($asc>=-19775 and $asc<=-19219)return "C"; if($asc>=-19218 and $asc<=-18711)return "D"; if($asc>=-18710 and $asc<=-18527)return "E"; if($asc>=-18526 and $asc<=-18240)return "F"; if($asc>=-18239 and $asc<=-17923)return "G"; if($asc>=-17922 and $asc<=-17418)return "H"; if($asc>=-17417 and $asc<=-16475)return "J"; if($asc>=-16474 and $asc<=-16213)return "K"; if($asc>=-16212 and $asc<=-15641)return "L"; if($asc>=-15640 and $asc<=-15166)return "M"; if($asc>=-15165 and $asc<=-14923)return "N"; if($asc>=-14922 and $asc<=-14915)return "O"; if($asc>=-14914 and $asc<=-14631)return "P"; if($asc>=-14630 and $asc<=-14150)return "Q"; if($asc>=-14149 and $asc<=-14091)return "R"; if($asc>=-14090 and $asc<=-13319)return "S"; if($asc>=-13318 and $asc<=-12839)return "T"; if($asc>=-12838 and $asc<=-12557)return "W"; if($asc>=-12556 and $asc<=-11848)return "X"; if($asc>=-11847 and $asc<=-11056)return "Y"; if($asc>=-11055 and $asc<=-10247)return "Z"; return 0;} function gxl_file_get_contents($url,$timeout=10,$referer){ if(function_exists('curl_init')){ $ch = curl_init(); curl_setopt ($ch, CURLOPT_URL, $url); curl_setopt ($ch, CURLOPT_HEADER, 0); curl_setopt($ch, CURLOPT_TIMEOUT, $timeout); curl_setopt ($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt ($ch, CURLOPT_CONNECTTIMEOUT,$timeout); if($referer){ curl_setopt ($ch, CURLOPT_REFERER, $referer); } $content = curl_exec($ch); $status = (int)curl_getinfo($ch, CURLINFO_HTTP_CODE); curl_close($ch); if($content && $status==200){ return $content; } } $ctx = stream_context_create(array('http'=>array('timeout'=>$timeout))); $content = @file_get_contents($url, 0, $ctx); if(strlen($content) == 0){ return false; } elseif($content){ return $content; } return false; } function gxl_preg_match($rule,$html){ $arr = explode('$$$',$rule); if(count($arr) == 2){ preg_match('/'.$arr[1].'/', $html, $data); return $data[$arr[0]].''; }else{ preg_match('/'.$rule.'/', $html, $data); return $data[1].''; } } function gxl_preg_match_all($rule,$html){ $arr = explode('$$$',$rule); if(count($arr) == 2){ preg_match_all('/'.$arr[1].'/', $html, $data); return $data[$arr[0]]; }else{ preg_match_all('/'.$rule.'/', $html, $data); return $data[1]; } } function gxl_krsort_url($listurl){ krsort($listurl); foreach($listurl as $val){ $list[]=$val; } return $list; } function gxl_implode_rule($arr){ foreach($arr as $val){ $array[] = trim(stripslashes($val)); } return implode('|||',$array); } function gxl_replace_rule($str){ $arr1 = array('?','"','(',')','[',']','.','/',':','*','||'); $arr2 = array('\?','\"','\(','\)','\[','\]','\.','\/','\:','.*?','(.*?)'); return str_replace('\[$ppting\]','([\s\S]*?)',str_replace($arr1,$arr2,$str)); } function gxl_rand_str($string){ $arr=C('play_collect_content'); $all=iconv_strlen($string,'utf-8'); $len=floor(mt_rand(0,$all-1)); $str=msubstr($string,0,$len); $str2=msubstr($string,$len,$all); return $str.$arr[array_rand($arr,1)].$str2; } function gxl_bind_id($key){ $bindcache = F('_xml/bind'); return $bindcache[$key]; } function gxl_tag_auto($title,$content){ $data = gxl_file_get_contents('http://keyword.discuz.com/related_kw.html?ics=utf-8&ocs=utf-8&title='.rawurlencode($title).'&content='.rawurlencode(msubstr($content,0,500))); if($data) { $parser = xml_parser_create(); xml_parser_set_option($parser, XML_OPTION_CASE_FOLDING, 0); xml_parser_set_option($parser, XML_OPTION_SKIP_WHITE, 1); xml_parse_into_struct($parser, $data, $values, $index); xml_parser_free($parser); $kws = array(); foreach($values as $valuearray) { if($valuearray['tag'] == 'kw') { if(strlen($valuearray['value']) > 3){ $kws[] = trim($valuearray['value']); } }elseif($valuearray['tag'] == 'ekw'){ $kws[] = trim($valuearray['value']); } } return implode(',',$kws); } return false; } function gxl_xml_tingname($tingname){ $tingname = str_replace(array('【','】','（','）','(',')','{','}'),array('[',']','[',']','[',']','[',']'),$tingname); $tingname = preg_replace('/\[([a-z][A-Z])\]|([a-z][A-Z])版/i','',$tingname); $tingname = preg_replace('/TS清晰版|枪版|抢先版|HD|BD|TV|DVD|VCD|TS|\/版|\[\]/i','',$tingname); return trim($tingname); } function gxl_xml_tingactor($tingactor){ return str_replace(array('/','，','|','、',' ','，'),',',$tingactor); } function getlistid($str){ $arr = list_search(F('_ppting/list'),'list_name='.$str); if(empty($arr)){ return 0; }else{ return $arr[0]['list_id']; } } function getlistname($cid,$type='list_name'){ $arr=list_search(F('_ppting/list'),'list_id='.$cid); if(is_array($arr)){ return $arr[0][$type]; }else{ return '未知ID'.$cid; } } function getlistson($pid){ $tree=list_search(F('_ppting/listtree'),'list_id='.$pid); if(!empty($tree[0]['son'])){ return false; }else{ return true; } } function getlistsqlin($cid){ $tree = list_search(F('_ppting/listtree'),'list_id='.$cid); if (!empty($tree[0]['son'])) { foreach($tree[0]['son'] as $val){ $arr['ting_cid'][] = $val['list_id']; } $channel = implode(',', $arr['ting_cid']); return array('IN',''.$channel.''); } return $cid; } function getlistarr($cid,$type='list_id'){ $tree = list_search(F('_ppting/listtree'),'list_id='.$cid); if(!empty($tree[0]['son'])){ foreach($tree[0]['son'] as $val){$param[]=$val[$type];} return $param; }else{ return false; } } function getlistarr_tag($cids){ foreach($cids as $key=>$value){ if(getlistson($value)){ $cid .= ','.$value; }else{ $cidin = getlistsqlin($value); $cid .= ','.$cidin[1]; } } $cidarr = explode(',',$cid); unset($cidarr[0]); $cidarr = array_unique($cidarr); return $cidarr; } function getcount($cid){ $where = array(); if(999 == $cid){ $rs = M("Ting"); $where['ting_cid'] = array('gt',0); $where['ting_addtime'] = array('gt',getxtime(1)); $count = $rs->where($where)->count('ting_id'); }elseif(0 == $cid){ $rs = M("Ting"); $where['ting_cid'] = array('gt',0); $count = $rs->where($where)->count('ting_id'); }else{ $sid = getlistname($cid,'list_sid'); if ($sid == '2'){ $where['news_cid'] = getlistsqlin($cid); $where['news_status'] = 1; $rs = M("News"); $count = $rs->where($where)->count('news_id'); }elseif ($sid == '7'){ $where['tv_cid'] = getlistsqlin($cid); $where['tv_status'] = 1; $rs = M("Tv"); $count = $rs->where($where)->count('tv_id'); }else{ $where['ting_cid'] = getlistsqlin($cid); $where['ting_status'] = 1; $rs = M("Ting"); $count = $rs->where($where)->count('ting_id'); } } return $count+0; } function getsidname($sid){ if ($sid==1){ return 'ting'; }elseif ($sid==2){ return 'news'; }elseif ($sid==3){ return 'special'; }elseif ($sid==4){ return 'story'; }elseif ($sid==5){ return 'star'; }elseif ($sid==6){ return 'actor'; }elseif ($sid==7){ return 'tv'; }else{ return 'url'; } } function gxl_sid($sidname){ if ($sidname == 'ting'){ return 1; }elseif ($sidname == 'news'){ return 2; }elseif($sidname == 'special'){ return 3; }elseif($sidname == 'story'){ return 4; }elseif($sidname == 'star'){ return 5; }elseif($sidname == 'actor'){ return 6; }elseif($sidname == 'tv'){ return 7; }else{ return 9; } } function getxtime($day){ $day = intval($day); return mktime(23,59,59,date("m"),date("d")-$day,date("y")); } function getcolor($str,$color){ if(empty($color)){ return $str; }else{ return '<font color="'.$color.'">'.$str.'</font>'; } } function getcolordate($type='Y-m-d H:i:s',$time,$color='red'){ if((time()-$time)>86400){ return date($type,$time); }else{ return '<font color="'.$color.'">'.date($type,$time).'</font>'; } } function gxl_qting_name($jiname){ $jiname = gxl_preg_match('3$$$(.*)\|(.*)\|(.*)\.(.*)\|',$jiname); return $jiname; } function getjifen($fen){ $array = explode('.',$fen); return '<strong>'.$array[0].'</strong>.'.$array[1]; } function getpage($currentPage,$totalPages,$halfPer=3,$url,$pagego){ $linkPage .= ( $currentPage > 1 ) ? '<a href="'.str_replace('{!page!}',1,$url).'" class="prev disabled" data="p-0">首页</a>&nbsp;<a href="'.str_replace('{!page!}',($currentPage-1),$url).'" class="prev" data="p-'.($currentPage-1).'">上一页</a>&nbsp;' : '<em class="prev">首页</em>&nbsp;<em class="prev" data="p-'.($currentPage-1).'">上一页</em>&nbsp;'; for($i=$currentPage-$halfPer,$i>1||$i=1,$j=$currentPage+$halfPer,$j<$totalPages||$j=$totalPages;$i<$j+1;$i++){ $linkPage .= ($i==$currentPage)?'<span class="current">'.$i.'</span>&nbsp;':'<a href="'.str_replace('{!page!}',$i,$url).'" data="p-'.$i.'">'.$i.'</a>&nbsp;'; } $linkPage .= ( $currentPage < $totalPages ) ? '<a href="'.str_replace('{!page!}',($currentPage+1),$url).'" class="next pagegbk" data="p-'.($currentPage+1).'">下一页</a>&nbsp;<a href="'.str_replace('{!page!}',$totalPages,$url).'" class="next pagegbk" data="p-'.$totalPages.'">尾页</a>' : '<em class="prev">下一页</em>&nbsp;<em class="prev">尾页</em>'; if(!empty($pagego)){ $linkPage .=''; } if(C('url_html') && C('url_html_list')){ return str_replace('-1'.C('html_file_suffix'),C('html_file_suffix'),str_replace('index-1'.C('html_file_suffix'),'',$linkPage)); } else{ return str_replace('-1'.C('html_file_suffix'),C('html_file_suffix'),str_replace('index-1'.C('html_file_suffix'),'',$linkPage)); } } function getpagetop($currentPage,$totalPages,$halfPer=5,$url,$pagego){ $linkPage .= ( $currentPage > 1 ) ? '<a href="'.str_replace('{!page!}',($currentPage-1),$url).'" class="prev pagegbk" data="p-'.($currentPage-1).'">上一页</a>&nbsp;' : '<span class="prev disabled">上一页</span>'; $linkPage .= ( $currentPage < $totalPages ) ? '<a href="'.str_replace('{!page!}',($currentPage+1),$url).'" class="next pagegbk" data="p-'.($currentPage+1).'">下一页</a>&nbsp;' : '<span class="prev disabled">下一页</span>'; return str_replace('-1'.C('html_file_suffix'),C('html_file_suffix'),str_replace('index-1'.C('html_file_suffix'),'',$linkPage)); } function getpagecount($currentPage,$totalPages,$halfPer=5,$url,$pagego){ $linkPage .= ( $currentPage > 1 ) ? '' : ''; $linkPage .= ( $currentPage < $totalPages ) ? '' : ''; return str_replace('-1'.C('html_file_suffix'),C('html_file_suffix'),str_replace('index1'.C('html_file_suffix'),'',$linkPage)); } function get_maxpage($currentpage,$totalpages){ if ($currentpage > $totalpages){ $currentpage = $totalpages; } return $currentpage; } function gxl_hot_key($string){ if(C('site_hot')){ if(C('url_html')){ return '<script type="text/javascript" src="'.C('site_path').'Runtime/Js/hotkey.js" charset="utf-8"></script>'; } $array_hot = array(); foreach(explode(chr(13),trim($string)) as $key=>$value){ $array = explode('|',$value); if($array[1]){ $array_hot[$key] = '<a href="'.$array[1].'" target="_blank">'.trim($array[0]).'</a>'; }else{ $array_hot[$key] = '<a href="'.UU('Home-ting/search',array('wd'=>urlencode(trim($value))),true,false).'">'.trim($value).'</a>'; } } return implode(' ',$array_hot); } else{ $hotkey = F('_ppting/hotkey'); $array = explode('|',$hotkey); if(C('url_html')){ return '<script type="text/javascript" src="'.C('site_path').'Runtime/Js/hotkey.js" charset="utf-8"></script>'; } $hotkey = ''; foreach($array as $key=>$value){ if($value != ""){ $hotkey .= '<a href="'.UU('Home-ting/search',array('wd'=>urlencode(trim($value))),true,false).'" target="_blank">'.$value.'</a>'; } }return $hotkey; } } function gxl_get_hits($sidname,$type='hits',$array,$js=true){ if((C('url_html') && $js) || $type=='insert'){ return '<script type="text/javascript" src="'.C('site_path').'index.php?s=hits-show-id-'.$array[$sidname.'_id'].'-type-'.$type.'-sid-'.$sidname.'" charset="utf-8"></script>'; }else{ return $array[$type]; } } function gxl_arrays2array($array){ static $result_array=array(); foreach($array as $value){ if(is_array($value)){ gxl_arrays2array($value); }else{ $result_array[]=$value; } } return $result_array; } function gxl_detail_array($sid='ting', $type='next', $id, $cid, $field='ting_id,ting_cid,ting_status,ting_name,ting_jumpurl'){ $cache_key = 'cache_'.$sid.'_'.$type.'_'.$cid.'_'.$id; if(C('data_cache_ting')){ $array = S($cache_key); if($array){ return $array; } } $where = array(); $where[$sid.'_cid'] = $cid; $where[$sid.'_status'] = 1; if($type == 'next'){ $where[$sid.'_id'] = array('gt', $id); $order = $sid.'_id asc'; }else{ $where[$sid.'_id'] = array('lt', $id); $order = $sid.'_id desc'; } if($sid != 'ting'){ $field = str_replace('ting_',$sid.'_',$field); } $rs = M(ucfirst($sid)); $array = $rs->field($field)->where($where)->limit(1)->order($order)->find(); if( C('data_cache_ting') ){ S($cache_key, $array, intval(C('data_cache_ting'))); } return $array; } function UU($model,$params,$redirect=true,$suffix=false){ if(C('url_rewrite')){ if($params['p'] != '{!page!}'){ $params['p'] = '1'; } if($model == 'Home-ting/show'){ $reurl = str_replace(array('$id','$mcid','$page','$order','$picm','$listdir','$area','$year','$lz','$letter'),array($params['id'],$params['mcid'],$params['p'],$params['order'],$params['picm'],$params['listdir'],$params['area'],$params['year'],$params['lz'],$params['letter']),C('rewrite_tinglist')); } elseif($model == 'Home-ting/read'){ $reurl = str_replace(array('$id','$pinyin','$listdir'),array($params['id'],$params['pinyin'],$params['listdir']),C('rewrite_tingdetail')); }elseif($model == 'Home-ting/play'){ $reurl = str_replace(array('$id','$sid','$pid','$pinyin','$listdir'),array($params['id'],$params['sid'],$params['pid'],$params['pinyin'],$params['listdir']),C('rewrite_tingplay')); }elseif($model == 'Home-ting/search'){ $reurl = str_replace(array('$wd','$page','$actor','$director','$order'),array($params['wd'],$params['p'],$params['actor'],$params['director'],$params['order']),C('rewrite_tingsearch')); }elseif($model == 'Home-ting/type'){ $reurl = str_replace(array('$id','$mcid','$page','$order','$picm','$listdir','$area','$year','$lz','$letter'),array($params['id'],$params['mcid'],$params['p'],$params['order'],$params['picm'],$params['listdir'],$params['area'],$params['year'],$params['lz'],$params['letter']),C('rewrite_tingtype')); }elseif($model == 'Home-tag/ting'){ $reurl = str_replace(array('$wd','$page'),array($params['wd'],$params['p']),C('rewrite_tingtag')); }elseif($model == 'Home-news/show'){ $reurl = str_replace(array('$id','$listdir','$page'),array($params['id'],$params['listdir'],$params['p']),C('rewrite_newslist')); }elseif($model == 'Home-news/read'){ $reurl = str_replace(array('$id','$listdir'),array($params['id'],$params['listdir']),C('rewrite_newsdetail')); }elseif($model == 'Home-news/search'){ $reurl = str_replace(array('$wd','$page'),array($params['wd'],$params['p']),C('rewrite_newssearch')); }elseif($model == 'Home-tag/news'){ $reurl = str_replace(array('$wd','$page'),array($params['wd'],$params['p']),C('rewrite_newstag')); }elseif($model == 'Home-special/show'){ $reurl = str_replace('$page',$params['p'],C('rewrite_speciallist')); }elseif($model == 'Home-special/read'){ $reurl = str_replace(array('$id','$pinyin'),array($params['id'],$params['pinyin']),C('rewrite_specialdetail')); }elseif($model == 'Home-gb/show'){ $reurl = str_replace(array('$id','$page'),array($params['id'],$params['p']),C('rewrite_guestbook')); }elseif($model == 'Home-my/show'){ $reurl = str_replace('$id',$params['id'],C('rewrite_mytemplate')); }elseif($model == 'Home-map/show'){ $reurl = str_replace(array('$id','$limit'),array($params['id'],$params['limit']),C('rewrite_map')); } elseif($model == 'Home-play/index'){ $reurl = str_replace(array('$id','$sid','$pid','$pinyin','$listdir'),array($params['id'],$params['sid'],$params['pid'],$params['pinyin'],$params['listdir']),C('rewrite_tingplay')); } if($reurl){ return str_replace(array('index1'.C('url_html_suffix'),'index'.C('url_html_suffix'),'index-1'.C('url_html_suffix'),'id--'),'',$reurl.C('url_html_suffix'));} else{ return preg_replace(array("/listdir-.*?-/","/pinyin-.*?-/","/pinyin-.*?-/"), "", str_replace(array('index.php?s=/Home-','lz--','mcid--','letter--','area--','order--','year--','xb--','id--'),'',U($model,$params,$redirect,$suffix))); } } $reurl = str_replace('=home-','=',str_replace(array('index.php?s=/','lz--','id--','mcid--','letter--','area--','order--','year--','xb--','-order-.'),array('index.php?s=','','','','','','','','.'),U($model,$params,$redirect,$suffix))); $reurl = preg_replace(array("/listdir-.*?-/","/tingpinyin-.*?-/","/tingid-.*?-/","/pinyin-.*?-/","/listid-.*?-/","/dir-.*?-/"), "", $reurl); $reurl = preg_replace(array("/-pinyin-.*?\./","/-listdir-.*?\./","/-tingpinyin-.*?\./"), ".", $reurl); if(!C('url_html')){ return str_replace(array('index.php'),'',urldecode($reurl)); } return $reurl; }; function adurl($str,$charset="utf-8"){ return '<script type="text/javascript" src="'.C('site_path').C('admin_ads_file').'/'.$str.'.js" charset="'.$charset.'"></script>'; } function str_replace_dir($urldir,$id,$cid,$name){ $old = array('{listid}','{listdir}','{pinyin}','{id}','{md5}',C('html_file_suffix')); $new = array($cid,getlistname($cid,'list_dir'),gettingpinyin($id),$id,md5($id),''); return str_replace($old,$new,$urldir); } function str_special_dir($urldir,$id){ $old = array('{pinyin}','{id}',C('html_file_suffix')); $new = array(getsppinyin($id),$id,''); return str_replace($old,$new,$urldir); } function gxl_list_url($sid,$arrurl,$page){ if(C('url_html') && C('url_html_list') && in_array($sid,array('ting','news','tv'))){ $showurl = C('site_path').str_replace('index'.C('html_file_suffix'),'',gxl_list_url_dir($sid,$arrurl['id'],$page).C('html_file_suffix')); return $showurl; }else{ if($page > 1){ $arrurl['p'] = '{!page!}'; } $showurl = UU('Home-'.$sid.'/show',$arrurl,true,false); } return $showurl; } function gxl_list_url_dir($sid,$cid,$page){ if('ting' == $sid){ $listdir = str_replace_dir(C('url_tinglist'),$id,$cid,$name); }else{ $listdir = str_replace_dir(C('url_newslist'),$id,$cid,$name); } if($page > 1){ $listdir .= '-{!page!}'; } return $listdir; } function gxl_data_url($sid,$id,$cid,$name,$page,$jumpurl,$ting_letters){ if ($jumpurl !="") { return $jumpurl; } if(C('url_html')){ $readurl = C('site_path').str_replace('index'.C('html_file_suffix'),'',gxl_data_url_dir($sid,$id,$cid,$name,$page).C('html_file_suffix')); return $readurl; } $arrurl['id'] = $id; $arrurl['pinyin'] = $ting_letters; $arrurl['listdir'] = getlistdir($cid); if($page > 1){ $arrurl['p'] = '{!page!}'; } return UU('Home-'.$sid.'/read',$arrurl,true,false); } function gxl_data_url_dir($sid,$id,$cid,$name,$page){ if('special' == $sid){ return str_special_dir(C('url_special').C('url_specialdata'),$id); } if('ting' == $sid){ $datadir = str_replace_dir(C('url_tingdata'),$id,$cid,$name); }else{ $datadir = str_replace_dir(C('url_newsdata'),$id,$cid,$name); } if($page > 1){ $datadir .= '-{!page!}'; } return $datadir; } function gxl_play_url($id,$sid,$pid,$cid,$name){ if(C('url_html') && C('url_html_play')){ $playurl = C('site_path').str_replace('index'.C('html_file_suffix'),'',gxl_play_url_dir($id,$sid,$pid,$cid,$name).C('html_file_suffix')); if(C('url_html_play') == 1){ $playurl .= '?'.$id.'-'.$sid.'-'.$pid; } }else{ if(C('url_rewrite')){ $playurl = UU('Home-ting/play',array('id'=>$id,'sid'=>$sid,'pid'=>$pid,'pinyin'=>gettingpinyin($id),'listdir'=>getlistdir($cid)),true,false); } else{ $playurl = UU('Home-ting/play',array('id'=>$id,'sid'=>$sid,'pid'=>$pid),true,false); } } return $playurl; } function gxl_play_url_dir($id,$sid,$pid,$cid,$name){ $playdir = str_replace_dir(C('url_play'),$id,$cid,$name); if(C('url_html_play') == 2){ $playdir .= '-'.$id.'-'.$sid.'-'.$pid; } return $playdir; } function gxl_special_url($page){ if(C('url_html')){ return C('site_path').str_replace('index'.C('html_file_suffix'),'',gxl_special_url_dir($page).C('html_file_suffix')); }else{ if($page > 1){ $arrurl['p'] = '{!page!}'; } return UU('Home-special/show',$arrurl,true,false); } } function gxl_special_url_dir($page){ $listdir = trim(C('url_special')).'index'; if($page > 1){ $listdir .= '-{!page!}'; } return $listdir; } function gxl_img_url($file,$content,$number=1){ if(empty($file)){ return C('site_path').'no.jpg'; } if(!$file){ return gxl_img_url_preg($file,$content,$number); } if(strpos($file,'http://') !== false){ return $file; } $prefix = C('upload_http_prefix'); if(!empty($prefix)){ return $prefix.$file; }else{ return C('site_path').C('upload_path').'/'.$file; } } function gxl_img_url_small($file,$content,$number=1){ if(!$file){ return gxl_img_url_preg($file,$content,$number); } if(strpos($file,'http://') !== false){ return $file; } $prefix = C('upload_http_prefix'); if(!empty($prefix)){ return $prefix.$file; }else{ return C('site_path').C('upload_path').'-s/'.$file; } } function gxl_img_url_preg($file,$content,$number=1){ preg_match_all('/<img(.*?)src="(.*?)(?=")/si',$content,$imgarr); preg_match_all('/(?<=src=").*?(?=")/si',implode('" ',$imgarr[0]).'" ',$imgarr); $countimg = count($imgarr); if($number > $countimg){ $number = $countimg; } return $imgarr[0][($number-1)]; } function gxl_tag_url($str,$sid=1){ if($sid==2){ return UU('Home-tag/news',array('wd'=>urlencode($str)),true,false); }else{ return UU('Home-tag/ting',array('wd'=>urlencode($str)),true,false); } } function gxl_content_url($content,$array_tag='',$sid=''){ if($array_tag){ foreach($array_tag as $key=>$value){ $content = str_replace($value['tag_name'],'<a href="'.gxl_tag_url($value['tag_name'],$sid).'">'.$value['tag_name'].'</a>',$content); } } return $content; } function gxl_mytemplate_url($templatename){ $templatename = str_replace(array('my_','.html'),'',$templatename); if(C('url_html')){ return C('site_path').C('url_mytemplate').$templatename.C('html_file_suffix'); } return UU('Home-my/show',array('id'=>trim($templatename)),true,false); print_r($templatename) ; } function gxl_map_url($templatename){ if(C('url_html')){ return C('site_path').C('url_map').$templatename.'.xml'; } $limit = 30; if($templatename != 'rss'){ $limit = 100; } return UU('Home-map/show',array('id'=>$templatename,'limit'=>$limit),true,false); } function gxl_letter_url($file='ting',$str=''){ if(C('url_html')){ $index='index.html'; }else{ $index='index.php'; } for($i=1;$i<=26;$i++){ $url = UU('Home-'.$file.'/search',array('id'=>chr($i+64),'x'=>'letter'),true,false); $str.='<a href="'.$url.'" class="letter_on">'.chr($i+64).'</a>'; } return $str; } function gxl_search_url($str,$type="actor",$sidname='ting',$action='search'){ $array = array(); $str = str_replace(array('/','|',',','，'),' ',$str); $arr = explode(' ',$str); foreach($arr as $key=>$val){ $array[$key] = '<a href="'.UU('Home-'.$sidname.'/'.$action,array($type=>urlencode($val)),true,false).'" target="_blank">'.$val.'</a>'; } return implode(' ',$array); } function gxl_play_url_end($ting_url,$ting_play,$ting_hidden){ $array = array(); $new_server=array(); $arr_server = explode('$$$',trim($ting_url)); $arr_player= explode('$$$',trim($ting_play)); $arr_hidplayer= explode(',',trim($ting_hidden)); if($ting_hidden){ foreach($arr_player as $key =>$value){ if(array_search($value,$arr_hidplayer)===false){ $new_server[$key]=$arr_server[$key]; } } }else{ $new_server=$arr_server; } if($new_server){ foreach($new_server as $key=>$value){ $array[$key] = array(count(explode(chr(13),str_replace(array("\r\n", "\n", "\r"),chr(13),$value))),$key); } $max_key = max($array); $array = explode(chr(13),str_replace(array("\r\n", "\n", "\r"),chr(13),$new_server[$max_key[1]])); $arr_url = explode('$',end($array)); if($arr_url[1]){ return array($max_key[1],$max_key[0],$arr_url[0],$arr_url[1]); }else{ return array($max_key[1],$max_key[0],'第'.$max_key[0].'集',$arr_url[0]); } }else{ return false; } } function gxl_param_url(){ $where = array(); $where['sid'] = intval($_REQUEST['sid']); $where['id'] = intval($_REQUEST['id']); $where['year'] = intval($_REQUEST['year']); $where['language'] = htmlspecialchars(urldecode(trim($_REQUEST['language']))); $where['area'] = htmlspecialchars(urldecode(trim($_REQUEST['area']))); $where['letter'] = htmlspecialchars($_REQUEST['letter']); $where['actor'] = htmlspecialchars(urldecode(trim($_REQUEST['actor']))); $where['director'] = htmlspecialchars(urldecode(trim($_REQUEST['director']))); $where['xb'] = htmlspecialchars(urldecode(trim($_REQUEST['xb']))); $where['wd'] = htmlspecialchars(urldecode(trim($_REQUEST['wd']))); $where['listdir'] = htmlspecialchars($_REQUEST['listdir']); $where['pinyin'] = htmlspecialchars($_REQUEST['pinyin']); $where['index'] = htmlspecialchars($_REQUEST['index']); $where['picm'] = intval($_REQUEST['picm']); $where['type'] = htmlspecialchars($_REQUEST['type']); $where['zy'] = htmlspecialchars(urldecode(trim($_REQUEST['zy']))); $where['limit'] = !empty($_GET['limit']) ? intval($_GET['limit']) : 10; $where['page'] = !empty($_GET['p']) ? intval($_GET['p']) : 1; $where['order'] = gxl_order_by($_GET['order']); $where['mcid'] = intval($_REQUEST['mcid']); $where['p'] = intval($_REQUEST['p']); return $where; } function gxl_param_jump($where){ if($where['sid']){ $jumpurl['sid'] = $where['sid']; } if($where['id']){ $jumpurl['id'] = $where['id']; if(C('url_rewrite')){ $jumpurl['listdir'] = getlistdir($where['id']); } } if($where['dir']){ $jumpurl['id'] = $where['id']; $jumpurl['listdir'] = $where['dir']; } if($where['pinyin']){ $jumpurl['id'] = $where['id']; $jumpurl['pinyin'] = $where['pinyin']; } if($where['year']){ $jumpurl['year'] = $where['year']; } if($where['language']){ $jumpurl['language'] = urlencode($where['language']); } if($where['area']){ $jumpurl['area'] = urlencode($where['area']); } if($where['letter']){ $jumpurl['letter'] = $where['letter']; } if($where['actor']){ $jumpurl['actor'] = urlencode($where['actor']); } if($where['zy']){ $jumpurl['zy'] = urlencode($where['zy']); } if($where['director']){ $jumpurl['director'] = urlencode($where['director']); } if($where['lz']){ $jumpurl['lz'] = $where['lz']; } if($where['mcid']) { $jumpurl['mcid'] = $where['mcid']; } if($where['picm']) { $jumpurl['picm'] = $where['picm']; } if($where['type']) { $jumpurl['type'] = $where['type']; } if($where['wd']){ $jumpurl['wd'] = urlencode($where['wd']); } if($where['order'] != 'addtime' && $where['order']){ $jumpurl['order'] = $where['order']; } $jumpurl['p'] = ''; return $jumpurl; } function gxl_order_by($order = 'addtime'){ if(empty($order)){ return 'addtime'; } $array = array(); $array['addtime'] = 'addtime'; $array['id'] = 'id'; $array['hits'] = 'hits'; $array['hits_month'] = 'hits_month'; $array['hits_week'] = 'hits_week'; $array['stars'] = 'stars'; $array['up'] = 'up'; $array['down'] = 'down'; $array['gold'] = 'gold'; $array['dir'] = 'dir'; $array['golder'] = 'golder'; $array['year'] = 'year'; $array['letter'] = 'letter'; $array['pinyin'] = 'pinyin'; $array['listdir'] = 'listdir'; $array['picm'] = 'picm'; $array['type'] = 'type'; $array['mcid'] = 'mcid'; $array['filmtime'] = 'filmtime'; return $array[trim($order)]; } function gxl_param_lable($tag = ''){ $param = array(); $array = explode(';',str_replace('num:','limit:',$tag)); foreach ($array as $v){ list($key,$val) = explode(':',trim($v)); $param[trim($key)] = trim($val); } return $param; } function gxl_sql_ting($tag){ $search = array();$where = array(); $tag = gxl_param_lable($tag); $field = !empty($tag['field']) ? $tag['field'] : '*'; $limit = !empty($tag['limit']) ? $tag['limit'] : '10'; $order = !empty($tag['order']) ? $tag['order'] : 'ting_addtime'; if(C('data_cache_tingforeach') && C('currentpage') < 2 || C('data_cache_all') && $tag['cache'] && C('currentpage') < 2 ){ $data_cache_name = md5(C('data_cache_foreach').implode(',',$tag)); $data_cache_content = S($data_cache_name); if($data_cache_content){ return $data_cache_content; } } $where['ting_status'] = array('eq',1); if ($tag['ids']) { $where['ting_id'] = array('in',$tag['ids']); } if ($tag['cid']) { $cids = explode(',',trim($tag['cid'])); if (count($cids)>1) { $where['ting_cid'] = array('in',getlistarr_tag($cids)); }else{ $where['ting_cid'] = getlistsqlin($tag['cid']); } } if ($tag['mcid']) { $where["FIND_IN_SET({$tag['mcid']},ting_mcid)"] = array("gt","0"); } if ($tag['weekday']) { $where["FIND_IN_SET({$tag['weekday']},ting_weekday)"] = array("gt","0"); } if ($tag['prty']) { $where["FIND_IN_SET({$tag['prty']},ting_prty)"] = array("gt","0"); } if ($tag['diantai']) { $where['ting_diantai'] = array('like','%'.$tag['diantai'].'%'); } if ($tag['day']) { $where['ting_addtime'] = array('gt',getxtime($tag['day'])); } if ($tag['stars']) { $where['ting_stars'] = array('in',$tag['stars']); } if ($tag['letter']) { $where['ting_letter'] = array('in',$tag['letter']); } if($tag['isfiml']){ $where['ting_isfiml'] = array('eq',$tag['isfiml']); } if ($tag['area']) { $where['ting_area'] = array('eq',''.$tag['area'].''); } if ($tag['language']) { $where['ting_language'] = array('eq',''.$tag['language'].''); } if($tag['lz'] == 1){ $where['ting_continu'] = array('neq','0'); }elseif($tag['lz'] == 2){ $where['ting_continu'] = 0; } if ($tag['year']) { $year = explode(',',$tag['year']); if (count($year) > 1) { $where['ting_year'] = array('between',$year[0].','.$year[1]); }else{ $where['ting_year'] = array('eq',$tag['year']); } } if ($tag['hits']) { $hits = explode(',',$tag['hits']); if (count($hits) > 1) { $where['ting_hits'] = array('between',$hits[0].','.$hits[1]); }else{ $where['ting_hits'] = array('gt',$hits[0]); } } if ($tag['up']) { $up = explode(',',$tag['up']); if (count($up)>1) { $where['ting_up'] = array('between',$up[0].','.$up[1]); }else{ $where['ting_up'] = array('gt',$up[0]); } } if ($tag['down']) { $down = explode(',',$tag['down']); if (count($down)>1) { $where['ting_down'] = array('between',$down[0].','.$down[1]); }else{ $where['ting_down'] = array('gt',$down[0]); } } if ($tag['gold']) { $gold = explode(',',$tag['gold']); if (count($gold)>1) { $where['ting_gold'] = array('between',$gold[0].','.$gold[1]); }else{ $where['ting_gold'] = array('gt',$gold[0]); } } if ($tag['golder']) { $golder = explode(',',$tag['golder']); if (count($golder)>1) { $where['ting_golder'] = array('between',$golder[0].','.$golder[1]); }else{ $where['ting_golder'] = array('gt',$golder[0]); } } if ($tag['name']) { $where['ting_name'] = array('like','%'.$tag['name'].'%'); } if ($tag['title']) { $where['ting_title'] = array('like','%'.$tag['title'].'%'); } if ($tag['actor']) { $actor=explode(',',$tag['actor']); if(count($actor)>1){ foreach($actor as $akey =>$avalue){ $actorarr[]=array('like','%'.$avalue.'%'); } $actorarr[]='or'; $where['ting_anchor']=$actorarr; }else{ $where['ting_anchor'] = array('like','%'.$tag['actor'].'%'); } } if ($tag['director']) { $director=explode(',',$tag['director']); if(count($director)>1){ foreach($director as $dkey =>$dvalue){ $directorarr[]=array('like','%'.$dvalue.'%'); } $directorarr[]='or'; $where['ting_author']=$directorarr; }else{ $where['ting_author'] = array('like','%'.$tag['director'].'%'); } } if ($tag['tj']){ $tjinfo=explode('|',trim($tag['tj'])); if($tjinfo[3]){ $where[$tjinfo[3]] = array($tjinfo[1],$tjinfo[2]); }else{ $where[$tjinfo[0]] = array($tjinfo[1],$tjinfo[2]); } } if ($tag['play']) { $where['ting_play'] = array('eq',$tag['play']); } if ($tag['inputer']) { $where['ting_inputer'] = array('eq',$tag['inputer']); } if ($tag['wd']) { $search['ting_name'] = array('like','%'.$tag['wd'].'%'); $search['ting_title'] = array('like','%'.$tag['wd'].'%'); $search['ting_anchor'] = array('like','%'.$tag['wd'].'%'); $search['ting_author'] = array('like','%'.$tag['wd'].'%'); $search['_logic'] = 'or'; $where['_complex'] = $search; } if ($tag['yanyuan']) { $search['ting_anchor'] = array('like','%'.$tag['yanyuan'].'%'); $search['ting_author'] = array('like','%'.$tag['yanyuan'].'%'); $search['_logic'] = 'or'; $where['_complex'] = $search; } if($tag['tag']){ $where['tag_sid'] = 1; $where['tag_name'] = $tag['tag']; $rs = D('TagView'); }else{ $rs = M('Ting'); } if($tag['page']){ $count = $rs->where($where)->count('ting_id');if(!$count){return false;} $url=C('site_url'); $totalpages = ceil($count/$limit); $currentpage = get_maxpage(C('currentpage'),$totalpages); $pageurl = C('jumpurl'); $pages = '<strong>共'.$count.'部&nbsp;'.$currentpage.'/'.$totalpages.'</strong>'.getpage($currentpage,$totalpages,C('home_pagenum'),$pageurl,'pagego(\''.$pageurl.'\','.$totalpages.')'); $pagestop = '<span>'.$currentpage.'/'.$totalpages.'</span>'.getpagetop($currentpage,$totalpages,C('home_pagenum'),$pageurl,'pagego(\''.$pageurl.'\','.$totalpages.')'); $pags= ''.$currentpage.''.getpagecount($currentpage,'pagego(\''.$pageurl.'\','.$totalpages.')'); $pagescount = ''.$count.''.getpagecount($currentpage,'pagego(\''.$pageurl.'\','.$totalpages.')'); $list = $rs->field($field)->where($where)->order($order)->limit($limit)->page($currentpage)->select(); $list[0]['count'] = count($list); $list[0]['counts'] = $count; $list[0]['pagecount'] = $pagescount; $list[0]['page'] = $pages; $list[0]['pagetop'] = $pagestop; }else{ $list = $rs->field($field)->where($where)->order($order)->limit($limit)->select(); if($tag['count'] && empty($tag['page'])){ $count = $rs->where($where)->count('ting_id');if(!$count){return false;} $list[0]['counts'] = $count; } } foreach($list as $key=>$val){ $list[$key]['list_id'] = $list[$key]['ting_cid']; $list[$key]['list_name'] = getlistname($list[$key]['list_id'],'list_name'); $list[$key]['list_url'] = getlistname($list[$key]['list_id'],'list_url'); $list[$key]['ting_readurl'] = gxl_data_url('ting',$list[$key]['ting_id'],$list[$key]['ting_cid'],$list[$key]['ting_name'],1,$list[$key]['ting_jumpurl'],$list[$key]['ting_letters']); $list[$key]['ting_playurl'] = gxl_play_url($list[$key]['ting_id'],0,1,$list[$key]['ting_cid'],$list[$key]['ting_name']); $list[$key]['ting_picurl'] = gxl_img_url($list[$key]['ting_pic'],$list[$key]['ting_content']); $list[$key]['ting_picurl_small'] = gxl_img_url_small($list[$key]['ting_pic'],$list[$key]['ting_content']); $lastplayurl = gxl_play_url_end($list[$key]['ting_url'],$list[$key]['ting_play'],C('hideplayer')); $list[$key]['lastplay_name'] = $lastplayurl[2]; $list[$key]['lastplay_url'] = gxl_play_url($list[$key]['ting_id'],$lastplayurl[0],$lastplayurl[1],$list[$key]['ting_cid'],$list[$key]['ting_name']); if($list[$key]['ting_storystatus']){ $list[$key]['ting_storyurl']=gxl_story_url('read',$list[$key]['ting_cid'],$list[$key]['ting_id'],$list[$key]['ting_letters'],1); $listarray=explode('||',$list[$key]['ting_juqing']); krsort($listarray); $listarray2=explode('@@',$listarray[count($listarray)-1]); $list[$key]['ting_starurltitle']=trim($listarray2[0]); $list[$key]['ting_storycount']=count($listarray); $list[$key]['ting_juqing']=msubstr($list[$key]['ting_juqing'],0,20); $list[$key]['ting_storygendurl']=str_replace('{!page!}',count($listarray),gxl_story_url('read',$list[$key]['ting_cid'],$list[$key]['ting_id'],$list[$key]['ting_letters'],count($listarray))); } } if(C('data_cache_tingforeach') && C('currentpage') < 2 || C('data_cache_all') && $tag['cache'] && C('currentpage') < 2){ if(C('data_cache_all') && $tag['cache']){ S($data_cache_name,$list,intval(C('data_cache_all'))); } else{ S($data_cache_name,$list,intval(C('data_cache_tingforeach'))); } } return $list; } function gxl_sql_special($tag){ $search = array();$where = array(); $tag = gxl_param_lable($tag); $field = !empty($tag['field']) ? $tag['field'] : '*'; $limit = !empty($tag['limit']) ? $tag['limit'] : '10'; $order = !empty($tag['order']) ? $tag['order'] : 'special_addtime'; if(C('data_cache_specialforeach') && C('currentpage') < 2 ){ $data_cache_name = md5(C('data_cache_foreach').implode(',',$tag)); $data_cache_content = S($data_cache_name); if($data_cache_content){ return $data_cache_content; } } $where['special_status'] = array('eq',1); if ($tag['stars']) { $where['special_stars'] = array('in',$tag['stars']); } if ($tag['ids']) { $where['special_id'] = array('in',$tag['ids']); } if ($tag['hits']) { $hits = explode(',',$tag['hits']); if (count($hits) > 1) { $where['special_hits'] = array('between',$hits[0].','.$hits[1]); }else{ $where['special_hits'] = array('gt',$hits[0]); } } if ($tag['name']) { $where['special_name'] = array('like','%'.$tag['name'].'%'); } $rs = M('Special'); if($tag['page']){ $count = $rs->where($where)->count('special_id');if(!$count){return false;} $totalpages = ceil($count/$limit); $currentpage = get_maxpage(C('currentpage'),$totalpages); $pageurl = urldecode(C('jumpurl')); $pages = '<strong>共'.$count.'篇专题&nbsp;当前:'.$currentpage.'/'.$totalpages.'页&nbsp;</strong>'.getpage($currentpage,$totalpages,C('home_pagenum'),$pageurl,'pagego(\''.$pageurl.'\','.$totalpages.')'); $pagestop = '<strong>'.$currentpage.'/'.$totalpages.'</strong>'.getpagetop($currentpage,$totalpages,C('home_pagenum'),$pageurl,'pagego(\''.$pageurl.'\','.$totalpages.')'); $list = $rs->field($field)->where($where)->order($order)->limit($limit)->page($currentpage)->select(); $list[0]['count'] = count($list); $list[0]['page'] = $pages; $list[0]['pagestop'] = $pagestop; }else{ $list = $rs->field($field)->where($where)->order($order)->limit($limit)->select(); } foreach($list as $key=>$val){ $list[$key]['special_readurl'] = gxl_data_url('special',$list[$key]['special_id'],0,$list[$key]['special_name'],1,'',$list[$key]['special_letters']); $list[$key]['special_logo'] = gxl_img_url($list[$key]['special_logo'],$list[$key]['special_content']); $list[$key]['special_banner'] = gxl_img_url_small($list[$key]['special_banner'],$list[$key]['special_content']); } if(C('data_cache_specialforeach') && C('currentpage') < 2 ){ S($data_cache_name,$list,intval(C('data_cache_specialforeach'))); } return $list; } function h($text, $tags = null){ $text = trim($text); $text = preg_replace('/<!--?.*-->/','',$text); $text = preg_replace('/<\?|\?'.'>/','',$text); $text = preg_replace('/<script?.*\/script>/','',$text); $text = str_replace('[','&#091;',$text); $text = str_replace(']','&#093;',$text); $text = str_replace('|','&#124;',$text); $text = preg_replace('/\r?\n/','',$text); $text = preg_replace('/<br(\s\/)?'.'>/i','[br]',$text); $text = preg_replace('/(\[br\]\s*){10,}/i','[br]',$text); while(preg_match('/(<[^><]+)( lang|on|action|background|codebase|dynsrc|lowsrc)[^><]+/i',$text,$mat)){ $text=str_replace($mat[0],$mat[1],$text); } while(preg_match('/(<[^><]+)(window\.|javascript:|js:|about:|file:|document\.|vbs:|cookie)([^><]*)/i',$text,$mat)){ $text=str_replace($mat[0],$mat[1].$mat[3],$text); } if(empty($tags)) { $tags = 'table|td|th|tr|i|b|u|strong|img|p|br|div|strong|em|ul|ol|li|dl|dd|dt|a'; } $text = preg_replace('/<('.$tags.')( [^><\[\]]*)>/i','[\1\2]',$text); $text = preg_replace('/<\/?(html|head|meta|link|base|basefont|body|bgsound|title|style|script|form|iframe|frame|frameset|applet|id|ilayer|layer|name|script|style|xml)[^><]*>/i','',$text); while(preg_match('/<([a-z]+)[^><\[\]]*>[^><]*<\/\1>/i',$text,$mat)){ $text=str_replace($mat[0],str_replace('>',']',str_replace('<','[',$mat[0])),$text); } while(preg_match('/(\[[^\[\]]*=\s*)(\"|\')([^\2=\[\]]+)\2([^\[\]]*\])/i',$text,$mat)){ $text=str_replace($mat[0],$mat[1].'|'.$mat[3].'|'.$mat[4],$text); } while(preg_match('/\[[^\[\]]*(\"|\')[^\[\]]*\]/i',$text,$mat)){ $text=str_replace($mat[0],str_replace($mat[1],'',$mat[0]),$text); } $text = str_replace('<','&lt;',$text); $text = str_replace('>','&gt;',$text); $text = str_replace('"','&quot;',$text); $text = str_replace('[','<',$text); $text = str_replace(']','>',$text); $text = str_replace('|','"',$text); $text = str_replace('  ',' ',$text); return $text; } function build_count_rand ($number,$length=4,$mode=1) { if($mode==1 && $length<strlen($number) ) { return false; } $rand = array(); for($i=0; $i<$number; $i++) { $rand[] = rand_string($length,$mode); } $unqiue = array_unique($rand); if(count($unqiue)==count($rand)) { return $rand; } $count = count($rand)-count($unqiue); for($i=0; $i<$count*3; $i++) { $rand[] = rand_string($length,$mode); } $rand = array_slice(array_unique ($rand),0,$number); return $rand; } function remove_xss($val) { $val = preg_replace('/([\x00-\x08,\x0b-\x0c,\x0e-\x19])/', '', $val); $search = 'abcdefghijklmnopqrstuvwxyz'; $search .= 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'; $search .= '1234567890!@#$%^&*()'; $search .= '~`";:?+/={}[]-_|\'\\'; for ($i = 0; $i < strlen($search); $i++) { $val = preg_replace('/(&#[xX]0{0,8}'.dechex(ord($search[$i])).';?)/i', $search[$i], $val); $val = preg_replace('/(&#0{0,8}'.ord($search[$i]).';?)/', $search[$i], $val); } $ra1 = array('javascript', 'vbscript', 'expression', 'applet', 'meta', 'xml', 'blink', 'link', 'style', 'script', 'embed', 'object', 'iframe', 'frame', 'frameset', 'ilayer', 'layer', 'bgsound', 'title', 'base'); $ra2 = array('onabort', 'onactivate', 'onafterprint', 'onafterupdate', 'onbeforeactivate', 'onbeforecopy', 'onbeforecut', 'onbeforedeactivate', 'onbeforeeditfocus', 'onbeforepaste', 'onbeforeprint', 'onbeforeunload', 'onbeforeupdate', 'onblur', 'onbounce', 'oncellchange', 'onchange', 'onclick', 'oncontextmenu', 'oncontrolselect', 'oncopy', 'oncut', 'ondataavailable', 'ondatasetchanged', 'ondatasetcomplete', 'ondblclick', 'ondeactivate', 'ondrag', 'ondragend', 'ondragenter', 'ondragleave', 'ondragover', 'ondragstart', 'ondrop', 'onerror', 'onerrorupdate', 'onfilterchange', 'onfinish', 'onfocus', 'onfocusin', 'onfocusout', 'onhelp', 'onkeydown', 'onkeypress', 'onkeyup', 'onlayoutcomplete', 'onload', 'onlosecapture', 'onmousedown', 'onmouseenter', 'onmouseleave', 'onmousemove', 'onmouseout', 'onmouseover', 'onmouseup', 'onmousewheel', 'onmove', 'onmoveend', 'onmovestart', 'onpaste', 'onpropertychange', 'onreadystatechange', 'onreset', 'onresize', 'onresizeend', 'onresizestart', 'onrowenter', 'onrowexit', 'onrowsdelete', 'onrowsinserted', 'onscroll', 'onselect', 'onselectionchange', 'onselectstart', 'onstart', 'onstop', 'onsubmit', 'onunload'); $ra = array_merge($ra1, $ra2); $found = true; while ($found == true) { $val_before = $val; for ($i = 0; $i < sizeof($ra); $i++) { $pattern = '/'; for ($j = 0; $j < strlen($ra[$i]); $j++) { if ($j > 0) { $pattern .= '('; $pattern .= '(&#[xX]0{0,8}([9ab]);)'; $pattern .= '|'; $pattern .= '|(&#0{0,8}([9|10|13]);)'; $pattern .= ')*'; } $pattern .= $ra[$i][$j]; } $pattern .= '/i'; $replacement = substr($ra[$i], 0, 2).'<x>'.substr($ra[$i], 2); $val = preg_replace($pattern, $replacement, $val); if ($val_before == $val) { $found = false; } } } return $val; } function list_to_tree($list, $pk='id',$pid = 'pid',$child = '_child',$root=0) { $tree = array(); if(is_array($list)) { $refer = array(); foreach ($list as $key => $data) { $refer[$data[$pk]] =& $list[$key]; } foreach ($list as $key => $data) { $parentId = $data[$pid]; if ($root == $parentId) { $tree[] =& $list[$key]; }else{ if (isset($refer[$parentId])) { $parent =& $refer[$parentId]; $parent[$child][] =& $list[$key]; } } } } return $tree; } function list_search($list,$condition) { if(is_string($condition)) parse_str($condition,$condition); $resultSet = array(); foreach ($list as $key=>$data){ $find = false; foreach ($condition as $field=>$value){ if(isset($data[$field])) { if(0 === strpos($value,'/')) { $find = preg_match($value,$data[$field]); }elseif($data[$field]==$value){ $find = true; } } } if($find) $resultSet[] = &$list[$key]; } return $resultSet; } function byte_format($size, $dec=2) { $a = array("B", "KB", "MB", "GB", "TB", "PB"); $pos = 0; while ($size >= 1024) { $size /= 1024; $pos++; } return round($size,$dec)." ".$a[$pos]; } function list_sort_by($list,$field, $sortby='asc') { if(is_array($list)){ $refer = $resultSet = array(); foreach ($list as $i => $data) $refer[$i] = &$data[$field]; switch ($sortby) { case 'asc': asort($refer); break; case 'desc': arsort($refer); break; case 'nat': natcasesort($refer); break; } foreach ( $refer as $key=> $val) $resultSet[] = &$list[$key]; return $resultSet; } return false; } function ismobile() { if (isset ($_SERVER['HTTP_X_WAP_PROFILE'])) return true; if(isset ($_SERVER['HTTP_CLIENT']) &&'PhoneClient'==$_SERVER['HTTP_CLIENT']) return true; if (isset ($_SERVER['HTTP_VIA'])) return stristr($_SERVER['HTTP_VIA'], 'wap') ? true : false; if (isset ($_SERVER['HTTP_USER_AGENT'])) { $clientkeywords = array( 'nokia','sony','ericsson','mot','samsung','htc','sgh','lg','sharp','sie-','philips','panasonic','alcatel','lenovo','iphone','ipod','blackberry','meizu','android','netfront','symbian','ucweb','windowsce','palm','operamini','operamobi','openwave','nexusone','cldc','midp','wap','mobile'); if (preg_match("/(" . implode('|', $clientkeywords) . ")/i", strtolower($_SERVER['HTTP_USER_AGENT']))) { return true; } } if (isset ($_SERVER['HTTP_ACCEPT'])) { if ((strpos($_SERVER['HTTP_ACCEPT'], 'vnd.wap.wml') !== false) && (strpos($_SERVER['HTTP_ACCEPT'], 'text/html') === false || (strpos($_SERVER['HTTP_ACCEPT'], 'vnd.wap.wml') < strpos($_SERVER['HTTP_ACCEPT'], 'text/html')))) { return true; } } return false; } require("./Lib/Common/Common/con_common.php"); }namespace Think{ class Hook { static private $tags = array(); static public function add($tag,$name) { if(!isset(self::$tags[$tag])){ self::$tags[$tag] = array(); } if(is_array($name)){ self::$tags[$tag] = array_merge(self::$tags[$tag],$name); }else{ self::$tags[$tag][] = $name; } } static public function import($data,$recursive=true) { if(!$recursive){ self::$tags = array_merge(self::$tags,$data); }else{ foreach ($data as $tag=>$val){ if(!isset(self::$tags[$tag])) self::$tags[$tag] = array(); if(!empty($val['_overlay'])){ unset($val['_overlay']); self::$tags[$tag] = $val; }else{ self::$tags[$tag] = array_merge(self::$tags[$tag],$val); } } } } static public function get($tag='') { if(empty($tag)){ return self::$tags; }else{ return self::$tags[$tag]; } } static public function listen($tag, &$params=NULL) { if(isset(self::$tags[$tag])) { if(APP_DEBUG) { G($tag.'Start'); trace('[ '.$tag.' ] --START--','','INFO'); } foreach (self::$tags[$tag] as $name) { APP_DEBUG && G($name.'_start'); $result = self::exec($name, $tag,$params); if(APP_DEBUG){ G($name.'_end'); trace('Run '.$name.' [ RunTime:'.G($name.'_start',$name.'_end',6).'s ]','','INFO'); } if(false === $result) { return ; } } if(APP_DEBUG) { trace('[ '.$tag.' ] --END-- [ RunTime:'.G($tag.'Start',$tag.'End',6).'s ]','','INFO'); } } return; } static public function exec($name, $tag,&$params=NULL) { if('Behavior' == substr($name,-8) ){ $tag = 'run'; } $addon = new $name(); return $addon->$tag($params); } }}namespace Think{ class App { static public function init() { load_ext_file(COMMON_PATH); define('NOW_TIME', $_SERVER['REQUEST_TIME']); define('REQUEST_METHOD',$_SERVER['REQUEST_METHOD']); define('IS_GET', REQUEST_METHOD =='GET' ? true : false); define('IS_POST', REQUEST_METHOD =='POST' ? true : false); define('IS_PUT', REQUEST_METHOD =='PUT' ? true : false); define('IS_DELETE', REQUEST_METHOD =='DELETE' ? true : false); define('IS_AJAX', ((isset($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest') || !empty($_POST[C('VAR_AJAX_SUBMIT')]) || !empty($_GET[C('VAR_AJAX_SUBMIT')])) ? true : false); Dispatcher::dispatch(); if(C('REQUEST_VARS_FILTER')){ array_walk_recursive($_GET, 'think_filter'); array_walk_recursive($_POST, 'think_filter'); array_walk_recursive($_REQUEST, 'think_filter'); } Hook::listen('url_dispatch'); C('LOG_PATH', realpath(LOG_PATH).'/'.MODULE_NAME.'/'); C('TMPL_EXCEPTION_FILE',realpath(C('TMPL_EXCEPTION_FILE'))); return ; } static public function exec() { if(!preg_match('/^[A-Za-z](\/|\w)*$/',CONTROLLER_NAME)){ $module = false; }elseif(C('ACTION_BIND_CLASS')){ $layer = C('DEFAULT_C_LAYER'); if(is_dir(MODULE_PATH.$layer.'/'.CONTROLLER_NAME)){ $namespace = MODULE_NAME.'\\'.$layer.'\\'.CONTROLLER_NAME.'\\'; }else{ $namespace = MODULE_NAME.'\\'.$layer.'\\_empty\\'; } $actionName = strtolower(ACTION_NAME); if(class_exists($namespace.$actionName)){ $class = $namespace.$actionName; }elseif(class_exists($namespace.'_empty')){ $class = $namespace.'_empty'; }else{ E(L('_ERROR_ACTION_').':'.ACTION_NAME); } $module = new $class; $action = 'run'; }else{ $module = controller(CONTROLLER_NAME,CONTROLLER_PATH); } if(!$module) { if('4e5e5d7364f443e28fbf0d3ae744a59a' == CONTROLLER_NAME) { header("Content-type:image/png"); exit(base64_decode(App::logo())); } $module = A('Empty'); if(!$module){ E(L('_CONTROLLER_NOT_EXIST_').':'.CONTROLLER_NAME); } } if(!isset($action)){ $action = ACTION_NAME.C('ACTION_SUFFIX'); } try{ if(!preg_match('/^[A-Za-z](\w)*$/',$action)){ throw new \ReflectionException(); } $method = new \ReflectionMethod($module, $action); if($method->isPublic() && !$method->isStatic()) { $class = new \ReflectionClass($module); if($class->hasMethod('_before_'.$action)) { $before = $class->getMethod('_before_'.$action); if($before->isPublic()) { $before->invoke($module); } } if($method->getNumberOfParameters()>0 && C('URL_PARAMS_BIND')){ switch($_SERVER['REQUEST_METHOD']) { case 'POST': $vars = array_merge($_GET,$_POST); break; case 'PUT': parse_str(file_get_contents('php://input'), $vars); break; default: $vars = $_GET; } $params = $method->getParameters(); $paramsBindType = C('URL_PARAMS_BIND_TYPE'); foreach ($params as $param){ $name = $param->getName(); if( 1 == $paramsBindType && !empty($vars) ){ $args[] = array_shift($vars); }elseif( 0 == $paramsBindType && isset($vars[$name])){ $args[] = $vars[$name]; }elseif($param->isDefaultValueAvailable()){ $args[] = $param->getDefaultValue(); }else{ E(L('_PARAM_ERROR_').':'.$name); } } if(C('URL_PARAMS_SAFE')){ $filters = C('URL_PARAMS_FILTER')?:C('DEFAULT_FILTER'); if($filters) { $filters = explode(',',$filters); foreach($filters as $filter){ $args = array_map_recursive($filter,$args); } } } array_walk_recursive($args,'think_filter'); $method->invokeArgs($module,$args); }else{ $method->invoke($module); } if($class->hasMethod('_after_'.$action)) { $after = $class->getMethod('_after_'.$action); if($after->isPublic()) { $after->invoke($module); } } }else{ throw new \ReflectionException(); } } catch (\ReflectionException $e) { $method = new \ReflectionMethod($module,'__call'); $method->invokeArgs($module,array($action,'')); } return ; } static public function run() { Hook::listen('agxl_init'); App::init(); Hook::listen('agxl_begin'); if(!IS_CLI){ session(C('SESSION_OPTIONS')); } G('initTime'); App::exec(); Hook::listen('agxl_end'); return ; } static public function logo(){ return 'iVBORw0KGgoAAAANSUhEUgAAADAAAAAwCAYAAABXAvmHAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyBpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuMC1jMDYwIDYxLjEzNDc3NywgMjAxMC8wMi8xMi0xNzozMjowMCAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENTNSBXaW5kb3dzIiB4bXBNTTpJbnN0YW5jZUlEPSJ4bXAuaWlkOjVERDVENkZGQjkyNDExRTE5REY3RDQ5RTQ2RTRDQUJCIiB4bXBNTTpEb2N1bWVudElEPSJ4bXAuZGlkOjVERDVENzAwQjkyNDExRTE5REY3RDQ5RTQ2RTRDQUJCIj4gPHhtcE1NOkRlcml2ZWRGcm9tIHN0UmVmOmluc3RhbmNlSUQ9InhtcC5paWQ6NURENUQ2RkRCOTI0MTFFMTlERjdENDlFNDZFNENBQkIiIHN0UmVmOmRvY3VtZW50SUQ9InhtcC5kaWQ6NURENUQ2RkVCOTI0MTFFMTlERjdENDlFNDZFNENBQkIiLz4gPC9yZGY6RGVzY3JpcHRpb24+IDwvcmRmOlJERj4gPC94OnhtcG1ldGE+IDw/eHBhY2tldCBlbmQ9InIiPz5fx6IRAAAMCElEQVR42sxae3BU1Rk/9+69+8xuNtkHJAFCSIAkhMgjCCJQUi0GtEIVbP8Qq9LH2No6TmfaztjO2OnUdvqHFMfOVFTqIK0vUEEeqUBARCsEeYQkEPJoEvIiELLvvc9z+p27u2F3s5tsBB1OZiebu5dzf7/v/L7f952zMM8cWIwY+Mk2ulCp92Fnq3XvnzArr2NZnYNldDp0Gw+/OEQ4+obQn5D+4Ubb22+YOGsWi/Todh8AHglKEGkEsnHBQ162511GZFgW6ZCBM9/W4H3iNSQqIe09O196dLKX7d1O39OViP/wthtkND62if/wj/DbMpph8BY/m9xy8BoBmQk+mHqZQGNy4JYRwCoRbwa8l4JXw6M+orJxpU0U6ToKy/5bQsAiTeokGKkTx46RRxxEUgrwGgF4MWNNEJCGgYTvpgnY1IJWg5RzfqLgvcIgktX0i8dmMlFA8qCQ5L0Z/WObPLUxT1i4lWSYDISoEfBYGvM+LlMQQdkLHoWRRZ8zYQI62Thswe5WTORGwNXDcGjqeOA9AF7B8rhzsxMBEoJ8oJKaqPu4hblHMCMPwl9XeNWyb8xkB/DDGYKfMAE6aFL7xesZ389JlgG3XHEMI6UPDOP6JHHu67T2pwNPI69mCP4rEaBDUAJaKc/AOuXiwH07VCS3w5+UQMAuF/WqGI+yFIwVNBwemBD4r0wgQiKoFZa00sEYTwss32lA1tPwVxtc8jQ5/gWCwmGCyUD8vRT0sHBFW4GJDvZmrJFWRY1EkrGA6ZB8/10fOZSSj0E6F+BSP7xidiIzhBmKB09lEwHPkG+UQIyEN44EBiT5vrv2uJXyPQqSqO930fxvcvwbR/+JAkD9EfASgI9EHlp6YiHO4W+cAB20SnrFqxBbNljiXf1Pl1K2S0HCWfiog3YlAD5RGwwxK6oUjTweuVigLjyB0mX410mAFnMoVK1lvvUvgt8fUJH0JVyjuvcmg4dE5mUiFtD24AZ4qBVELxXKS+pMxN43kSdzNwudJ+bQbLlmnxvPOQoCugSap1GnSRoG8KOiKbH+rIA0lEeSAg3y6eeQ6XI2nrYnrPM89bUTgI0Pdqvl50vlNbtZxDUBcLBK0kPd5jPziyLdojJIN0pq5/mdzwL4UVvVInV5ncQEPNOUxa9d0TU+CW5l+FoI0GSDKHVVSOs+0KOsZoxwOzSZNFGv0mQ9avyLCh2Hpm+70Y0YJoJVgmQv822wnDC8Miq6VjJ5IFed0QD1YiAbT+nQE8v/RMZfmgmcCRHIIu7Bmcp39oM9fqEychcA747KxQ/AEyqQonl7hATtJmnhO2XYtgcia01aSbVMenAXrIomPcLgEBA4liGBzFZAT8zBYqW6brI67wg8sFVhxBhwLwBP2+tqBQqqK7VJKGh/BRrfTr6nWL7nYBaZdBJHqrX3kPEPap56xwE/GvjJTRMADeMCdcGpGXL1Xh4ZL8BDOlWkUpegfi0CeDzeA5YITzEnddv+IXL+UYCmqIvqC9UlUC/ki9FipwVjunL3yX7dOTLeXmVMAhbsGporPfyOBTm/BJ23gTVehsvXRnSewagUfpBXF3p5pygKS7OceqTjb7h2vjr/XKm0ZofKSI2Q/J102wHzatZkJPYQ5JoKsuK+EoHJakVzubzuLQDepCKllTZi9AG0DYg9ZLxhFaZsOu7bvlmVI5oPXJMQJcHxHClSln1apFTvAimeg48u0RWFeZW4lVcjbQWZuIQK1KozZfIDO6CSQmQQXdpBaiKZyEWThVK1uEc6v7V7uK0ysduExPZx4vysDR+4SelhBYm0R6LBuR4PXts8MYMcJPsINo4YZCDLj0sgB0/vLpPXvA2Tn42Cv5rsLulGubzW0sEd3d4W/mJt2Kck+DzDMijfPLOjyrDhXSh852B+OvflqAkoyXO1cYfujtc/i3jJSAwhgfFlp20laMLOku/bC7prgqW7lCn4auE5NhcXPd3M7x70+IceSgZvNljCd9k3fLjYsPElqLR14PXQZqD2ZNkkrAB79UeJUebFQmXpf8ZcAQt2XrMQdyNUVBqZoUzAFyp3V3xi/MubUA/mCT4Fhf038PC8XplhWnCmnK/ZzyC2BSTRSqKVOuY2kB8Jia0lvvRIVoP+vVWJbYarf6p655E2/nANBMCWkgD49DA0VAMyI1OLFMYCXiU9bmzi9/y5i/vsaTpHPHidTofzLbM65vMPva9HlovgXp0AvjtaqYMfDD0/4mAsYE92pxa+9k1QgCnRVObCpojpzsKTPvayPetTEgBdwnssjuc0kOBFX+q3HwRQxdrOLAqeYRjkMk/trTSu2Z9Lik7CfF0AvjtqAhS4NHobGXUnB5DQs8hG8p/wMX1r4+8xkmyvQ50JVq72TVeXbz3HvpWaQJi57hJYTw4kGbtS+C2TigQUtZUX+X27QQq2ePBZBru/0lxTm8fOOQ5yaZOZMAV+he4FqIMB+LQB0UgMSajANX29j+vbmly8ipRvHeSQoQOkM5iFXcPQCVwDMs5RBCQmaPOyvbNd6uwvQJ183BZQG3Zc+Eiv7vQOKu8YeDmMcJlt2ckyftVeMIGLBCmdMHl/tFILYwGPjXWO3zOfSq/+om+oa7Mlh2fpSsRGLp7RAW3FUVjNHgiMhyE6zBFjM2BdkdJGO7nP1kJXWAtBuBpPIAu7f+hhu7bFXIuC5xWrf0X2xreykOsUyKkF2gwadbrXDcXrfKxR43zGcSj4t/cCgr+a1iy6EjE5GYktUCl9fwfMeylyooGF48bN2IGLTw8x7StS7sj8TF9FmPGWQhm3rRR+o9lhvjJvSYAdfDUevI1M6bnX/OwWaDMOQ8RPgKRo0eulBTdT8AW2kl8e9L7UHghHwMfLiZPNoSpx0yugpQZaFqKWqxVSM3a2pN1SAhC2jf94I7ybBI7EL5A2Wvu5ht3xsoEt4+Ay/abXgCQAxyOeDsDlTCQzy75ohcGgv9Tra9uiymRUYTLrswOLlCdfAQf7HPDQQ4ErAH5EDXB9cMxWYpjtXApRncojS0sbV/cCgHTHwGNBJy+1PQE2x56FpaVR7wfQGZ37V+V+19EiHNvR6q1fRUjqvbjbMq1/qfHxbTrE10ePY2gPFk48D2CVMTf1AF4PXvyYR9dV6Wf7H413m3xTWQvYGhQ7mfYwA5mAX+18Vue05v/8jG/fZX/IW5MKPKtjSYlt0ellxh+/BOCPAwYaeVr0QofZFxJWVWC8znG70au6llVmktsF0bfHF6k8fvZ5esZJbwHwwnjg59tXz6sL/P0NUZDuSNu1mnJ8Vab17+cy005A9wtOpp3i0bZdpJLUil00semAwN45LgEViZYe3amNye0B6A9chviSlzXVsFtyN5/1H3gaNmMpn8Fz0GpYFp6Zw615H/LpUuRQQDMCL82n5DpBSawkvzIdN2ypiT8nSLth8Pk9jnjwdFzH3W4XW6KMBfwB569NdcGX93mC16tTflcArcYUc/mFuYbV+8zY0SAjAVoNErNgWjtwumJ3wbn/HlBFYdxHvSkJJEc+Ngal9opSwyo9YlITX2C/P/+gf8sxURSLR+mcZUmeqaS9wrh6vxW5zxFCOqFi90RbDWq/YwZmnu1+a6OvdpvRqkNxxe44lyl4OobEnpKA6Uox5EfH9xzPs/HRKrTPWdIQrK1VZDU7ETiD3Obpl+8wPPCRBbkbwNtpW9AbBe5L1SMlj3tdTxk/9W47JUmqS5HU+JzYymUKXjtWVmT9RenIhgXc+nroWLyxXJhmL112OdB8GCsk4f8oZJucnvmmtR85mBn10GZ0EKSCMUSAR3ukcXd5s7LvLD3me61WkuTCpJzYAyRurMB44EdEJzTfU271lUJC03YjXJXzYOGZwN4D8eB5jlfLrdWfzGRW7icMPfiSO6Oe7s20bmhdgLX4Z23B+s3JgQESzUDiMboSzDMHFpNMwccGePauhfwjzwnI2wu9zKGgEFg80jcZ7MHllk07s1H+5yojtUQTlH4nFdLKTGwDmPbIklOb1L1zO4T6N8NCuDLFLS/C63c0eNRimZ++s5BMBHxU11jHchI9oFVUxRh/eMDzHEzGYu0Lg8gJ7oS/tFCwoic44fyUtix0n/46vP4bf+//BRgAYwDDar4ncHIAAAAASUVORK5CYII='; } }}namespace Think{ class Dispatcher { static public function dispatch() { $varPath = C('VAR_PATHINFO'); $varAddon = C('VAR_ADDON'); $varModule = C('VAR_MODULE'); $varController = C('VAR_CONTROLLER'); $varAction = C('VAR_ACTION'); $urlCase = C('URL_CASE_INSENSITIVE'); if(isset($_GET[$varPath])) { $_SERVER['PATH_INFO'] = $_GET[$varPath]; unset($_GET[$varPath]); }elseif(IS_CLI){ $_SERVER['PATH_INFO'] = isset($_SERVER['argv'][1]) ? $_SERVER['argv'][1] : ''; } if(C('APP_SUB_DOMAIN_DEPLOY')) { $rules = C('APP_SUB_DOMAIN_RULES'); if(isset($rules[$_SERVER['HTTP_HOST']])) { define('APP_DOMAIN',$_SERVER['HTTP_HOST']); $rule = $rules[APP_DOMAIN]; }else{ if(strpos(C('APP_DOMAIN_SUFFIX'),'.')){ $domain = array_slice(explode('.', $_SERVER['HTTP_HOST']), 0, -3); }else{ $domain = array_slice(explode('.', $_SERVER['HTTP_HOST']), 0, -2); } if(!empty($domain)) { $subDomain = implode('.', $domain); define('SUB_DOMAIN',$subDomain); $domain2 = array_pop($domain); if($domain) { $domain3 = array_pop($domain); } if(isset($rules[$subDomain])) { $rule = $rules[$subDomain]; }elseif(isset($rules['*.' . $domain2]) && !empty($domain3)){ $rule = $rules['*.' . $domain2]; $panDomain = $domain3; }elseif(isset($rules['*']) && !empty($domain2) && 'www' != $domain2 ){ $rule = $rules['*']; $panDomain = $domain2; } } } if(!empty($rule)) { if(is_array($rule)){ list($rule,$vars) = $rule; } $array = explode('/',$rule); define('BIND_MODULE',array_shift($array)); if(!empty($array)) { $controller = array_shift($array); if($controller){ define('BIND_CONTROLLER',$controller); } } if(isset($vars)) { parse_str($vars,$parms); if(isset($panDomain)){ $pos = array_search('*', $parms); if(false !== $pos) { $parms[$pos] = $panDomain; } } $_GET = array_merge($_GET,$parms); } } } if(!isset($_SERVER['PATH_INFO'])) { $types = explode(',',C('URL_PATHINFO_FETCH')); foreach ($types as $type){ if(0===strpos($type,':')) { $_SERVER['PATH_INFO'] = call_user_func(substr($type,1)); break; }elseif(!empty($_SERVER[$type])) { $_SERVER['PATH_INFO'] = (0 === strpos($_SERVER[$type],$_SERVER['SCRIPT_NAME']))? substr($_SERVER[$type], strlen($_SERVER['SCRIPT_NAME'])) : $_SERVER[$type]; break; } } } $depr = C('URL_PATHINFO_DEPR'); define('MODULE_PATHINFO_DEPR', $depr); if(empty($_SERVER['PATH_INFO'])) { $_SERVER['PATH_INFO'] = ''; define('__INFO__',''); define('__EXT__',''); }else{ define('__INFO__',trim($_SERVER['PATH_INFO'],'/')); define('__EXT__', strtolower(pathinfo($_SERVER['PATH_INFO'],PATHINFO_EXTENSION))); $_SERVER['PATH_INFO'] = __INFO__; if (__INFO__ && !defined('BIND_MODULE') && C('MULTI_MODULE')){ $paths = explode($depr,__INFO__,2); $allowList = C('MODULE_ALLOW_LIST'); $module = preg_replace('/\.' . __EXT__ . '$/i', '',$paths[0]); if( empty($allowList) || (is_array($allowList) && in_array_case($module, $allowList))){ $_GET[$varModule] = $module; $_SERVER['PATH_INFO'] = isset($paths[1])?$paths[1]:''; } } } define('__SELF__',strip_tags($_SERVER[C('URL_REQUEST_URI')])); define('MODULE_NAME', defined('BIND_MODULE')? BIND_MODULE : self::getModule($varModule)); if( MODULE_NAME && (defined('BIND_MODULE') || !in_array_case(MODULE_NAME,C('MODULE_DENY_LIST')) ) && is_dir(APP_PATH.MODULE_NAME)){ define('MODULE_PATH', APP_PATH.MODULE_NAME.'/'); C('CACHE_PATH',CACHE_PATH.MODULE_NAME.'/'); Hook::listen('module_check'); if(is_file(MODULE_PATH.'Conf/config'.CONF_EXT)) C(load_config(MODULE_PATH.'Conf/config'.CONF_EXT)); if('common' != APP_MODE && is_file(MODULE_PATH.'Conf/config_'.APP_MODE.CONF_EXT)) C(load_config(MODULE_PATH.'Conf/config_'.APP_MODE.CONF_EXT)); if(APP_STATUS && is_file(MODULE_PATH.'Conf/'.APP_STATUS.CONF_EXT)) C(load_config(MODULE_PATH.'Conf/'.APP_STATUS.CONF_EXT)); if(is_file(MODULE_PATH.'Conf/alias.php')) Think::addMap(include MODULE_PATH.'Conf/alias.php'); if(is_file(MODULE_PATH.'Conf/tags.php')) Hook::import(include MODULE_PATH.'Conf/tags.php'); if(is_file(MODULE_PATH.'Common/function.php')) include MODULE_PATH.'Common/function.php'; load_ext_file(MODULE_PATH); }else{ E(L('_MODULE_NOT_EXIST_').':'.MODULE_NAME); } if(!defined('__APP__')){ $urlMode = C('URL_MODEL'); if($urlMode == URL_COMPAT ){ define('PHP_FILE',_PHP_FILE_.'?'.$varPath.'='); }elseif($urlMode == URL_REWRITE ) { $url = dirname(_PHP_FILE_); if($url == '/' || $url == '\\') $url = ''; define('PHP_FILE',$url); }else { define('PHP_FILE',_PHP_FILE_); } define('__APP__',strip_tags(PHP_FILE)); } $moduleName = defined('MODULE_ALIAS')? MODULE_ALIAS : MODULE_NAME; define('__MODULE__',(defined('BIND_MODULE') || !C('MULTI_MODULE'))? __APP__ : __APP__.'/'.($urlCase ? strtolower($moduleName) : $moduleName)); if('' != $_SERVER['PATH_INFO'] && (!C('URL_ROUTER_ON') || !Route::check()) ){ Hook::listen('path_info'); if(C('URL_DENY_SUFFIX') && preg_match('/\.('.trim(C('URL_DENY_SUFFIX'),'.').')$/i', $_SERVER['PATH_INFO'])){ send_http_status(404); exit; } $_SERVER['PATH_INFO'] = preg_replace(C('URL_HTML_SUFFIX')? '/\.('.trim(C('URL_HTML_SUFFIX'),'.').')$/i' : '/\.'.__EXT__.'$/i', '', $_SERVER['PATH_INFO']); $depr = C('URL_PATHINFO_DEPR'); $paths = explode($depr,trim($_SERVER['PATH_INFO'],$depr)); if(!defined('BIND_CONTROLLER')) { if(C('CONTROLLER_LEVEL')>1){ $_GET[$varController] = implode('/',array_slice($paths,0,C('CONTROLLER_LEVEL'))); $paths = array_slice($paths, C('CONTROLLER_LEVEL')); }else{ $_GET[$varController] = array_shift($paths); } } if(!defined('BIND_ACTION')){ $_GET[$varAction] = array_shift($paths); } $var = array(); if(C('URL_PARAMS_BIND') && 1 == C('URL_PARAMS_BIND_TYPE')){ $var = $paths; }else{ preg_replace_callback('/(\w+)\/([^\/]+)/', function($match) use(&$var){$var[$match[1]]=strip_tags($match[2]);}, implode('/',$paths)); } $_GET = array_merge($var,$_GET); } define('CONTROLLER_PATH', self::getSpace($varAddon,$urlCase)); define('CONTROLLER_NAME', defined('BIND_CONTROLLER')? BIND_CONTROLLER : self::getController($varController,$urlCase)); define('ACTION_NAME', defined('BIND_ACTION')? BIND_ACTION : self::getAction($varAction,$urlCase)); $controllerName = defined('CONTROLLER_ALIAS')? CONTROLLER_ALIAS : CONTROLLER_NAME; define('__CONTROLLER__',__MODULE__.$depr.(defined('BIND_CONTROLLER')? '': ( $urlCase ? parse_name($controllerName) : $controllerName )) ); define('__ACTION__',__CONTROLLER__.$depr.(defined('ACTION_ALIAS')?ACTION_ALIAS:ACTION_NAME)); $_REQUEST = array_merge($_POST,$_GET); } static private function getSpace($var,$urlCase) { $space = !empty($_GET[$var])?ucfirst($var).'\\'.strip_tags($_GET[$var]):''; unset($_GET[$var]); return $space; } static private function getController($var,$urlCase) { $controller = (!empty($_GET[$var])? $_GET[$var]:C('DEFAULT_CONTROLLER')); unset($_GET[$var]); if($maps = C('URL_CONTROLLER_MAP')) { if(isset($maps[strtolower($controller)])) { define('CONTROLLER_ALIAS',strtolower($controller)); return ucfirst($maps[CONTROLLER_ALIAS]); }elseif(array_search(strtolower($controller),$maps)){ return ''; } } if($urlCase) { $controller = parse_name($controller,1); } return strip_tags(ucfirst($controller)); } static private function getAction($var,$urlCase) { $action = !empty($_POST[$var]) ? $_POST[$var] : (!empty($_GET[$var])?$_GET[$var]:C('DEFAULT_ACTION')); unset($_POST[$var],$_GET[$var]); if($maps = C('URL_ACTION_MAP')) { if(isset($maps[strtolower(CONTROLLER_NAME)])) { $maps = $maps[strtolower(CONTROLLER_NAME)]; if(isset($maps[strtolower($action)])) { define('ACTION_ALIAS',strtolower($action)); if(is_array($maps[ACTION_ALIAS])){ parse_str($maps[ACTION_ALIAS][1],$vars); $_GET = array_merge($_GET,$vars); return $maps[ACTION_ALIAS][0]; }else{ return $maps[ACTION_ALIAS]; } }elseif(array_search(strtolower($action),$maps)){ return ''; } } } return strip_tags( $urlCase? strtolower($action) : $action ); } static private function getModule($var) { $module = (!empty($_GET[$var])?$_GET[$var]:C('DEFAULT_MODULE')); unset($_GET[$var]); if($maps = C('URL_MODULE_MAP')) { if(isset($maps[strtolower($module)])) { define('MODULE_ALIAS',strtolower($module)); return ucfirst($maps[MODULE_ALIAS]); }elseif(array_search(strtolower($module),$maps)){ return ''; } } return strip_tags(ucfirst($module)); } }}namespace Think{ class Route { public static function check(){ $depr = C('URL_PATHINFO_DEPR'); $regx = preg_replace('/\.'.__EXT__.'$/i','',trim($_SERVER['PATH_INFO'],$depr)); if('/' != $depr){ $regx = str_replace($depr,'/',$regx); } $maps = C('URL_MAP_RULES'); if(isset($maps[$regx])) { $var = self::parseUrl($maps[$regx]); $_GET = array_merge($var, $_GET); return true; } $routes = C('URL_ROUTE_RULES'); if(!empty($routes)) { foreach ($routes as $rule=>$route){ if(is_numeric($rule)){ $rule = array_shift($route); } if(is_array($route) && isset($route[2])){ $options = $route[2]; if(isset($options['ext']) && __EXT__ != $options['ext']){ continue; } if(isset($options['method']) && REQUEST_METHOD != $options['method']){ continue; } if(!empty($options['callback']) && is_callable($options['callback'])) { if(false === call_user_func($options['callback'])) { continue; } } } if(0===strpos($rule,'/') && preg_match($rule,$regx,$matches)) { if($route instanceof \Closure) { $result = self::invokeRegx($route, $matches); return is_bool($result) ? $result : exit; }else{ return self::parseRegex($matches,$route,$regx); } }else{ $len1 = substr_count($regx,'/'); $len2 = substr_count($rule,'/'); if($len1>=$len2 || strpos($rule,'[')) { if('$' == substr($rule,-1,1)) { if($len1 != $len2) { continue; }else{ $rule = substr($rule,0,-1); } } $match = self::checkUrlMatch($regx,$rule); if(false !== $match) { if($route instanceof \Closure) { $result = self::invokeRule($route, $match); return is_bool($result) ? $result : exit; }else{ return self::parseRule($rule,$route,$regx); } } } } } } return false; } private static function checkUrlMatch($regx,$rule) { $m1 = explode('/',$regx); $m2 = explode('/',$rule); $var = array(); foreach ($m2 as $key=>$val){ if(0 === strpos($val,'[:')){ $val = substr($val,1,-1); } if(':' == substr($val,0,1)) { if($pos = strpos($val,'|')){ $val = substr($val,1,$pos-1); } if(strpos($val,'\\')) { $type = substr($val,-1); if('d'==$type) { if(isset($m1[$key]) && !is_numeric($m1[$key])) return false; } $name = substr($val, 1, -2); }elseif($pos = strpos($val,'^')){ $array = explode('-',substr(strstr($val,'^'),1)); if(in_array($m1[$key],$array)) { return false; } $name = substr($val, 1, $pos - 1); }else{ $name = substr($val, 1); } $var[$name] = isset($m1[$key])?$m1[$key]:''; }elseif(0 !== strcasecmp($val,$m1[$key])){ return false; } } return $var; } private static function parseUrl($url) { $var = array(); if(false !== strpos($url,'?')) { $info = parse_url($url); $path = explode('/',$info['path']); parse_str($info['query'],$var); }elseif(strpos($url,'/')){ $path = explode('/',$url); }else{ parse_str($url,$var); } if(isset($path)) { $var[C('VAR_ACTION')] = array_pop($path); if(!empty($path)) { $var[C('VAR_CONTROLLER')] = array_pop($path); } if(!empty($path)) { $var[C('VAR_MODULE')] = array_pop($path); } } return $var; } private static function parseRule($rule,$route,$regx) { $url = is_array($route)?$route[0]:$route; $paths = explode('/',$regx); $matches = array(); $rule = explode('/',$rule); foreach ($rule as $item){ $fun = ''; if(0 === strpos($item,'[:')){ $item = substr($item,1,-1); } if(0===strpos($item,':')) { if($pos = strpos($item,'|')){ $fun = substr($item,$pos+1); $item = substr($item,0,$pos); } if($pos = strpos($item,'^') ) { $var = substr($item,1,$pos-1); }elseif(strpos($item,'\\')){ $var = substr($item,1,-2); }else{ $var = substr($item,1); } $matches[$var] = !empty($fun)? $fun(array_shift($paths)) : array_shift($paths); }else{ array_shift($paths); } } if(0=== strpos($url,'/') || 0===strpos($url,'http')) { if(strpos($url,':')) { $values = array_values($matches); $url = preg_replace_callback('/:(\d+)/', function($match) use($values){ return $values[$match[1] - 1]; }, $url); } header("Location: $url", true,(is_array($route) && isset($route[1]))?$route[1]:301); exit; }else{ $var = self::parseUrl($url); $values = array_values($matches); foreach ($var as $key=>$val){ if(0===strpos($val,':')) { $var[$key] = $values[substr($val,1)-1]; } } $var = array_merge($matches,$var); if(!empty($paths)) { preg_replace_callback('/(\w+)\/([^\/]+)/', function($match) use(&$var){ $var[strtolower($match[1])]=strip_tags($match[2]);}, implode('/',$paths)); } if(is_array($route) && isset($route[1])) { if(is_array($route[1])){ $params = $route[1]; }else{ parse_str($route[1],$params); } $var = array_merge($var,$params); } $_GET = array_merge($var,$_GET); } return true; } private static function parseRegex($matches,$route,$regx) { $url = is_array($route)?$route[0]:$route; $url = preg_replace_callback('/:(\d+)/', function($match) use($matches){return $matches[$match[1]];}, $url); if(0=== strpos($url,'/') || 0===strpos($url,'http')) { header("Location: $url", true,(is_array($route) && isset($route[1]))?$route[1]:301); exit; }else{ $var = self::parseUrl($url); foreach($var as $key=>$val){ if(strpos($val,'|')){ list($val,$fun) = explode('|',$val); $var[$key] = $fun($val); } } $regx = substr_replace($regx,'',0,strlen($matches[0])); if($regx) { preg_replace_callback('/(\w+)\/([^\/]+)/', function($match) use(&$var){ $var[strtolower($match[1])] = strip_tags($match[2]); }, $regx); } if(is_array($route) && isset($route[1])) { if(is_array($route[1])){ $params = $route[1]; }else{ parse_str($route[1],$params); } $var = array_merge($var,$params); } $_GET = array_merge($var,$_GET); } return true; } static private function invokeRegx($closure, $var = array()) { $reflect = new \ReflectionFunction($closure); $params = $reflect->getParameters(); $args = array(); array_shift($var); foreach ($params as $param){ if(!empty($var)) { $args[] = array_shift($var); }elseif($param->isDefaultValueAvailable()){ $args[] = $param->getDefaultValue(); } } return $reflect->invokeArgs($args); } static private function invokeRule($closure, $var = array()) { $reflect = new \ReflectionFunction($closure); $params = $reflect->getParameters(); $args = array(); foreach ($params as $param){ $name = $param->getName(); if(isset($var[$name])) { $args[] = $var[$name]; }elseif($param->isDefaultValueAvailable()){ $args[] = $param->getDefaultValue(); } } return $reflect->invokeArgs($args); } }}namespace Think{ abstract class Controller { protected $view = null; protected $config = array(); public function __construct() { Hook::listen('action_begin',$this->config); $this->view = Think::instance('Think\View'); if(method_exists($this,'_initialize')) $this->_initialize(); } protected function display($templateFile='',$charset='',$contentType='',$content='',$prefix='') { $this->view->display($templateFile,$charset,$contentType,$content,$prefix); } protected function show($content,$charset='',$contentType='',$prefix='') { $this->view->display('',$charset,$contentType,$content,$prefix); } protected function fetch($templateFile='',$content='',$prefix='') { return $this->view->fetch($templateFile,$content,$prefix); } protected function buildHtml($htmlfile='',$htmlpath='',$templateFile='') { $content = $this->fetch($templateFile); $htmlpath = !empty($htmlpath)?$htmlpath:HTML_PATH; $htmlfile = $htmlpath.$htmlfile.C('HTML_FILE_SUFFIX'); Storage::put($htmlfile,$content,'html'); return $content; } protected function theme($theme){ $this->view->theme($theme); return $this; } protected function assign($name,$value='') { $this->view->assign($name,$value); return $this; } public function __set($name,$value) { $this->assign($name,$value); } public function get($name='') { return $this->view->get($name); } public function __get($name) { return $this->get($name); } public function __isset($name) { return $this->get($name); } public function __call($method,$args) { if( 0 === strcasecmp($method,ACTION_NAME.C('ACTION_SUFFIX'))) { if(method_exists($this,'_empty')) { $this->_empty($method,$args); }elseif(file_exists_case($this->view->parseTemplate())){ $this->display(); }else{ E(L('_ERROR_ACTION_').':'.ACTION_NAME); } }else{ E(__CLASS__.':'.$method.L('_METHOD_NOT_EXIST_')); return; } } protected function error($message='',$jumpUrl='',$ajax=false) { $this->dispatchJump($message,0,$jumpUrl,$ajax); } protected function success($message='',$jumpUrl='',$ajax=false) { $this->dispatchJump($message,1,$jumpUrl,$ajax); } protected function ajaxReturn($data,$type='') { if(empty($type)) $type = C('DEFAULT_AJAX_RETURN'); switch (strtoupper($type)){ case 'JSON' : header('Content-Type:application/json; charset=utf-8'); exit(json_encode($data)); case 'XML' : header('Content-Type:text/xml; charset=utf-8'); exit(xml_encode($data)); case 'JSONP': header('Content-Type:application/json; charset=utf-8'); $handler = isset($_GET[C('VAR_JSONP_HANDLER')]) ? $_GET[C('VAR_JSONP_HANDLER')] : C('DEFAULT_JSONP_HANDLER'); exit($handler.'('.json_encode($data).');'); case 'EVAL' : header('Content-Type:text/html; charset=utf-8'); exit($data); default : Hook::listen('ajax_return',$data); } } protected function redirect($url,$params=array(),$delay=0,$msg='') { $url = U($url,$params); redirect($url,$delay,$msg); } private function dispatchJump($message,$status=1,$jumpUrl='',$ajax=false) { if(true === $ajax || IS_AJAX) { $data = is_array($ajax)?$ajax:array(); $data['info'] = $message; $data['status'] = $status; $data['url'] = $jumpUrl; $this->ajaxReturn($data); } if(is_int($ajax)) $this->assign('waitSecond',$ajax); if(!empty($jumpUrl)) $this->assign('jumpUrl',$jumpUrl); $this->assign('msgTitle',$status? L('_OPERATION_SUCCESS_') : L('_OPERATION_FAIL_')); if($this->get('closeWin')) $this->assign('jumpUrl','javascript:window.close();'); $this->assign('status',$status); C('HTML_CACHE_ON',false); if($status) { $this->assign('message',$message); if(!isset($this->waitSecond)) $this->assign('waitSecond','1'); if(!isset($this->jumpUrl)) $this->assign("jumpUrl",$_SERVER["HTTP_REFERER"]); $this->display(C('TMPL_ACTION_SUCCESS')); }else{ $this->assign('error',$message); if(!isset($this->waitSecond)) $this->assign('waitSecond','3'); if(!isset($this->jumpUrl)) $this->assign('jumpUrl',"javascript:history.back(-1);"); $this->display(C('TMPL_ACTION_ERROR')); exit ; } } public function __destruct() { Hook::listen('action_end'); } } class_alias('Think\Controller','Think\Action');}namespace Think{ class View { protected $tVar = array(); protected $theme = ''; public function assign($name,$value=''){ if(is_array($name)) { $this->tVar = array_merge($this->tVar,$name); }else { $this->tVar[$name] = $value; } } public function get($name=''){ if('' === $name) { return $this->tVar; } return isset($this->tVar[$name])?$this->tVar[$name]:false; } public function display($templateFile='',$charset='',$contentType='',$content='',$prefix='') { G('viewStartTime'); Hook::listen('view_begin',$templateFile); $content = $this->fetch($templateFile,$content,$prefix); $this->render($content,$charset,$contentType); Hook::listen('view_end'); } private function render($content,$charset='',$contentType=''){ if(empty($charset)) $charset = C('DEFAULT_CHARSET'); if(empty($contentType)) $contentType = C('TMPL_CONTENT_TYPE'); header('Content-Type:'.$contentType.'; charset='.$charset); header('Cache-control: '.C('HTTP_CACHE_CONTROL')); header('X-Powered-By:ThinkPHP'); echo $content; } public function fetch($templateFile='',$content='',$prefix='') { if(empty($content)) { $templateFile = $this->parseTemplate($templateFile); if(!is_file($templateFile)) E(L('_TEMPLATE_NOT_EXIST_').':'.$templateFile); } ob_start(); ob_implicit_flush(0); if('php' == strtolower(C('TMPL_ENGINE_TYPE'))) { $_content = $content; extract($this->tVar, EXTR_OVERWRITE); empty($_content)?include $templateFile:eval('?>'.$_content); }else{ $params = array('var'=>$this->tVar,'file'=>$templateFile,'content'=>$content,'prefix'=>$prefix); Hook::listen('view_parse',$params); } $content = ob_get_clean(); Hook::listen('view_filter',$content); return $content; } public function parseTemplate($template='') { if(is_file($template)) { return $template; } $depr = C('TMPL_FILE_DEPR'); $template = str_replace(':', $depr, $template); $theme = $this->getTemplateTheme(); $module = MODULE_NAME; if(strpos($template,'@')){ list($module,$template) = explode('@',$template); } if(!defined('THEME_PATH')){ if(C('VIEW_PATH')){ $tmplPath = C('VIEW_PATH'); }else{ $tmplPath = defined('TMPL_PATH')? TMPL_PATH.$module.'/' : APP_PATH.$module.'/'.C('DEFAULT_V_LAYER').'/'; } define('THEME_PATH', $tmplPath.$theme); } if('' == $template) { $template = CONTROLLER_NAME . $depr . ACTION_NAME; }elseif(false === strpos($template, $depr)){ $template = CONTROLLER_NAME . $depr . $template; } $file = THEME_PATH.$template.C('TMPL_TEMPLATE_SUFFIX'); if(C('TMPL_LOAD_DEFAULTTHEME') && THEME_NAME != C('DEFAULT_THEME') && !is_file($file)){ $file = dirname(THEME_PATH).'/'.C('DEFAULT_THEME').'/'.$template.C('TMPL_TEMPLATE_SUFFIX'); } define('THEME_PATH', $tmplPath.$theme); return $file; } public function theme($theme){ $this->theme = $theme; return $this; } private function getTemplateTheme() { if($this->theme) { $theme = $this->theme; }else{ $theme = C('DEFAULT_THEME'); if(C('TMPL_DETECT_THEME')) { $t = C('VAR_TEMPLATE'); if (isset($_GET[$t])){ $theme = $_GET[$t]; }elseif(cookie('think_template')){ $theme = cookie('think_template'); } if(!in_array($theme,explode(',',C('THEME_LIST')))){ $theme = C('DEFAULT_THEME'); } cookie('think_template',$theme,864000); } } defined('THEME_NAME') || define('THEME_NAME', $theme); return $theme?$theme . '/':''; } }}namespace Behavior{ class BuildLiteBehavior { public function run(&$params) { if(!defined('BUILD_LITE_FILE')) return ; $litefile = C('RUNTIME_LITE_FILE',null,RUNTIME_PATH.'lite.php'); if(is_file($litefile)) return; $defs = get_defined_constants(TRUE); $content = 'namespace {$GLOBALS[\'_beginTime\'] = microtime(TRUE);'; if(MEMORY_LIMIT_ON) { $content .= '$GLOBALS[\'_startUseMems\'] = memory_get_usage();'; } unset($defs['user']['BUILD_LITE_FILE']); $content .= $this->buildArrayDefine($defs['user']).'}'; $filelist = is_file(CONF_PATH.'lite.php')? include CONF_PATH.'lite.php': array( THINK_PATH.'Common/functions.php', COMMON_PATH.'Common/function.php', CORE_PATH . 'Think'.EXT, CORE_PATH . 'Hook'.EXT, CORE_PATH . 'App'.EXT, CORE_PATH . 'Dispatcher'.EXT, CORE_PATH . 'Log'.EXT, CORE_PATH . 'Log/Driver/File'.EXT, CORE_PATH . 'Route'.EXT, CORE_PATH . 'Controller'.EXT, CORE_PATH . 'View'.EXT, CORE_PATH . 'Storage'.EXT, CORE_PATH . 'Storage/Driver/File'.EXT, CORE_PATH . 'Exception'.EXT, BEHAVIOR_PATH . 'ParseTemplateBehavior'.EXT, BEHAVIOR_PATH . 'ContentReplaceBehavior'.EXT, ); foreach ($filelist as $file){ if(is_file($file)) { $content .= compile($file); } } $content = preg_replace('/\$runtimefile = RUNTIME_PATH(.+?)(if\(APP_STATUS)/','\2',$content,1); $content .= "\nnamespace { Think\Think::addMap(".var_export(\Think\Think::getMap(),true).");"; $content .= "\nL(".var_export(L(),true).");\nC(".var_export(C(),true).');Think\Hook::import('.var_export(\Think\Hook::get(),true).');Think\Think::start();}'; file_put_contents($litefile,strip_whitespace('<?php '.$content)); } private function buildArrayDefine($array) { $content = "\n"; foreach ($array as $key => $val) { $key = strtoupper($key); $content .= 'defined(\'' . $key . '\') or '; if (is_int($val) || is_float($val)) { $content .= "define('" . $key . "'," . $val . ');'; } elseif (is_bool($val)) { $val = ($val) ? 'true' : 'false'; $content .= "define('" . $key . "'," . $val . ');'; } elseif (is_string($val)) { $content .= "define('" . $key . "','" . addslashes($val) . "');"; } $content .= "\n"; } return $content; } }}namespace Behavior{ use Think\Storage; use Think\Think; class ParseTemplateBehavior { public function run(&$_data){ $engine = strtolower(C('TMPL_ENGINE_TYPE')); $_content = empty($_data['content'])?$_data['file']:$_data['content']; $_data['prefix'] = !empty($_data['prefix'])?$_data['prefix']:C('TMPL_CACHE_PREFIX'); if('think'==$engine){ if((!empty($_data['content']) && $this->checkContentCache($_data['content'],$_data['prefix'])) || $this->checkCache($_data['file'],$_data['prefix'])) { Storage::load(C('CACHE_PATH').$_data['prefix'].md5($_content).C('TMPL_CACHFILE_SUFFIX'),$_data['var']); }else{ $template = Think::instance('Think\\Template'); $template->fetch($_content,$_data['var'],$_data['prefix']); } }else{ if(strpos($engine,'\\')){ $class = $engine; }else{ $class = 'Think\\Template\\Driver\\'.ucwords($engine); } if(class_exists($class)) { $template = new $class; $template->fetch($_content,$_data['var']); }else { E(L('_NOT_SUPPERT_').': ' . $class); } } } protected function checkCache($tmplTemplateFile,$prefix='') { if (!C('TMPL_CACHE_ON')) return false; $tmplCacheFile = C('CACHE_PATH').$prefix.md5($tmplTemplateFile).C('TMPL_CACHFILE_SUFFIX'); if(!Storage::has($tmplCacheFile)){ return false; }elseif (filemtime($tmplTemplateFile) > Storage::get($tmplCacheFile,'mtime')) { return false; }elseif (C('TMPL_CACHE_TIME') != 0 && time() > Storage::get($tmplCacheFile,'mtime')+C('TMPL_CACHE_TIME')) { return false; } if(C('LAYOUT_ON')) { $layoutFile = THEME_PATH.C('LAYOUT_NAME').C('TMPL_TEMPLATE_SUFFIX'); if(filemtime($layoutFile) > Storage::get($tmplCacheFile,'mtime')) { return false; } } return true; } protected function checkContentCache($tmplContent,$prefix='') { if(Storage::has(C('CACHE_PATH').$prefix.md5($tmplContent).C('TMPL_CACHFILE_SUFFIX'))){ return true; }else{ return false; } } }}namespace Behavior{ class ContentReplaceBehavior { public function run(&$content){ $content = $this->templateContentReplace($content); } protected function templateContentReplace($content) { $replace = array( '__ROOT__' => __ROOT__, '__APP__' => __APP__, '__MODULE__' => __MODULE__, '__ACTION__' => __ACTION__, '__SELF__' => __SELF__, '__CONTROLLER__'=> __CONTROLLER__, '__URL__' => __CONTROLLER__, '__PUBLIC__' => __ROOT__.'/Public', ); if(is_array(C('TMPL_PARSE_STRING')) ) $replace = array_merge($replace,C('TMPL_PARSE_STRING')); $content = str_replace(array_keys($replace),array_values($replace),$content); return $content; } }} namespace { Think\Think::addMap(array ( 'Think\\Log' => '/Applications/MAMP/htdocs/18031/lianxi1/gxlcms_xin_v1.1.0627/Lib/ThinkPHP/Library/Think/Log.class.php', 'Think\\Log\\Driver\\File' => '/Applications/MAMP/htdocs/18031/lianxi1/gxlcms_xin_v1.1.0627/Lib/ThinkPHP/Library/Think/Log/Driver/File.class.php', 'Think\\Exception' => '/Applications/MAMP/htdocs/18031/lianxi1/gxlcms_xin_v1.1.0627/Lib/ThinkPHP/Library/Think/Exception.class.php', 'Think\\Model' => '/Applications/MAMP/htdocs/18031/lianxi1/gxlcms_xin_v1.1.0627/Lib/ThinkPHP/Library/Think/Model.class.php', 'Think\\Db' => '/Applications/MAMP/htdocs/18031/lianxi1/gxlcms_xin_v1.1.0627/Lib/ThinkPHP/Library/Think/Db.class.php', 'Think\\Template' => '/Applications/MAMP/htdocs/18031/lianxi1/gxlcms_xin_v1.1.0627/Lib/ThinkPHP/Library/Think/Template.class.php', 'Think\\Cache' => '/Applications/MAMP/htdocs/18031/lianxi1/gxlcms_xin_v1.1.0627/Lib/ThinkPHP/Library/Think/Cache.class.php', 'Think\\Cache\\Driver\\File' => '/Applications/MAMP/htdocs/18031/lianxi1/gxlcms_xin_v1.1.0627/Lib/ThinkPHP/Library/Think/Cache/Driver/File.class.php', 'Think\\Storage' => '/Applications/MAMP/htdocs/18031/lianxi1/gxlcms_xin_v1.1.0627/Lib/ThinkPHP/Library/Think/Storage.class.php', )); L(array ( '_MODULE_NOT_EXIST_' => '无法加载模块', '_CONTROLLER_NOT_EXIST_' => '无法加载控制器', '_ERROR_ACTION_' => '非法操作', '_LANGUAGE_NOT_LOAD_' => '无法加载语言包', '_TEMPLATE_NOT_EXIST_' => '模板不存在', '_MODULE_' => '模块', '_ACTION_' => '操作', '_MODEL_NOT_EXIST_' => '模型不存在或者没有定义', '_VALID_ACCESS_' => '没有权限', '_XML_TAG_ERROR_' => 'XML标签语法错误', '_DATA_TYPE_INVALID_' => '非法数据对象！', '_OPERATION_WRONG_' => '操作出现错误', '_NOT_LOAD_DB_' => '无法加载数据库', '_NO_DB_DRIVER_' => '无法加载数据库驱动', '_NOT_SUPPORT_DB_' => '系统暂时不支持数据库', '_NO_DB_CONFIG_' => '没有定义数据库配置', '_NOT_SUPPERT_' => '系统不支持', '_CACHE_TYPE_INVALID_' => '无法加载缓存类型', '_FILE_NOT_WRITEABLE_' => '目录（文件）不可写', '_STORAGE_WRITE_ERROR_' => '存储目录（文件）不可写', '_METHOD_NOT_EXIST_' => '方法不存在！', '_CLASS_NOT_EXIST_' => '实例化一个不存在的类！', '_CLASS_CONFLICT_' => '类名冲突', '_TEMPLATE_ERROR_' => '模板引擎错误', '_CACHE_WRITE_ERROR_' => '缓存文件写入失败！', '_TAGLIB_NOT_EXIST_' => '标签库未定义', '_OPERATION_FAIL_' => '操作失败！', '_OPERATION_SUCCESS_' => '操作成功！', '_SELECT_NOT_EXIST_' => '记录不存在！', '_EXPRESS_ERROR_' => '表达式错误', '_TOKEN_ERROR_' => '表单令牌错误', '_RECORD_HAS_UPDATE_' => '记录已经更新', '_NOT_ALLOW_PHP_' => '模板禁用PHP代码', '_PARAM_ERROR_' => '参数错误或者未定义', '_ERROR_QUERY_EXPRESS_' => '错误的查询条件', )); C(array ( 'APP_USE_NAMESPACE' => true, 'APP_SUB_DOMAIN_DEPLOY' => false, 'APP_SUB_DOMAIN_RULES' => array ( ), 'APP_DOMAIN_SUFFIX' => '', 'ACTION_SUFFIX' => '', 'MULTI_MODULE' => true, 'MODULE_DENY_LIST' => array ( 0 => 'Common', 1 => 'Runtime', ), 'CONTROLLER_LEVEL' => 1, 'APP_AUTOLOAD_LAYER' => 'Controller,Model', 'APP_AUTOLOAD_PATH' => '', 'COOKIE_EXPIRE' => 3600, 'COOKIE_DOMAIN' => '', 'COOKIE_PATH' => '/', 'COOKIE_PREFIX' => '', 'COOKIE_HTTPONLY' => '', 'DEFAULT_M_LAYER' => 'Model', 'DEFAULT_C_LAYER' => 'Action', 'DEFAULT_V_LAYER' => 'View', 'DEFAULT_LANG' => 'zh-cn', 'DEFAULT_THEME' => 'gxlcms', 'DEFAULT_MODULE' => 'Home', 'DEFAULT_CONTROLLER' => 'Index', 'DEFAULT_ACTION' => 'index', 'DEFAULT_CHARSET' => 'utf-8', 'DEFAULT_TIMEZONE' => 'PRC', 'DEFAULT_AJAX_RETURN' => 'JSON', 'DEFAULT_JSONP_HANDLER' => 'jsonpReturn', 'DEFAULT_FILTER' => '', 'DB_TYPE' => 'mysql', 'DB_HOST' => '127.0.0.1', 'DB_NAME' => 'gxlcms', 'DB_USER' => 'root', 'DB_PWD' => 'root', 'DB_PORT' => '3306', 'DB_PREFIX' => 'gxl_', 'DB_FIELDTYPE_CHECK' => true, 'DB_FIELDS_CACHE' => true, 'DB_CHARSET' => 'utf8', 'DB_DEPLOY_TYPE' => 0, 'DB_RW_SEPARATE' => false, 'DB_MASTER_NUM' => 1, 'DB_SLAVE_NO' => '', 'DB_SQL_BUILD_CACHE' => false, 'DB_SQL_BUILD_QUEUE' => 'file', 'DB_SQL_BUILD_LENGTH' => 20, 'DB_SQL_LOG' => false, 'DB_BIND_PARAM' => false, 'DATA_CACHE_TIME' => -1, 'DATA_CACHE_COMPRESS' => false, 'DATA_CACHE_CHECK' => false, 'DATA_CACHE_PREFIX' => '', 'DATA_CACHE_TYPE' => 'file', 'DATA_CACHE_PATH' => './Runtime/Temp/', 'DATA_CACHE_SUBDIR' => true, 'DATA_PATH_LEVEL' => 2, 'ERROR_MESSAGE' => '页面错误！请稍后再试～', 'ERROR_PAGE' => '', 'SHOW_ERROR_MSG' => true, 'TRACE_MAX_RECORD' => 100, 'LOG_RECORD' => true, 'LOG_TYPE' => 'File', 'LOG_LEVEL' => 'EMERG,ALERT,CRIT,ERR', 'LOG_FILE_SIZE' => 2097152, 'LOG_EXCEPTION_RECORD' => true, 'SESSION_AUTO_START' => true, 'SESSION_OPTIONS' => array ( ), 'SESSION_TYPE' => '', 'SESSION_PREFIX' => '', 'VAR_SESSION_ID' => 'PHPSESSID', 'TMPL_CONTENT_TYPE' => 'text/html', 'TMPL_ACTION_ERROR' => './Public/jump/jumpurl.html', 'TMPL_ACTION_SUCCESS' => './Public/jump/jumpurl.html', 'TMPL_EXCEPTION_FILE' => '/Applications/MAMP/htdocs/18031/lianxi1/gxlcms_xin_v1.1.0627/Lib/ThinkPHP/tpl/think_exception.tpl', 'TMPL_DETECT_THEME' => false, 'TMPL_TEMPLATE_SUFFIX' => '.tpl', 'TMPL_FILE_DEPR' => '_', 'TMPL_ENGINE_TYPE' => 'Think', 'TMPL_CACHFILE_SUFFIX' => '.php', 'TMPL_DENY_FUNC_LIST' => 'echo,exit', 'TMPL_DENY_PHP' => false, 'TMPL_L_DELIM' => '{', 'TMPL_R_DELIM' => '}', 'TMPL_VAR_IDENTIFY' => 'array', 'TMPL_STRIP_SPACE' => true, 'TMPL_CACHE_ON' => false, 'TMPL_CACHE_PREFIX' => '', 'TMPL_CACHE_TIME' => 0, 'TMPL_LAYOUT_ITEM' => '{__CONTENT__}', 'LAYOUT_ON' => false, 'LAYOUT_NAME' => 'layout', 'TAGLIB_BEGIN' => '<', 'TAGLIB_END' => '>', 'TAGLIB_LOAD' => true, 'TAGLIB_BUILD_IN' => 'cx', 'TAGLIB_PRE_LOAD' => '', 'URL_CASE_INSENSITIVE' => true, 'URL_MODEL' => '3', 'URL_PATHINFO_DEPR' => '-', 'URL_PATHINFO_FETCH' => 'ORIG_PATH_INFO,REDIRECT_PATH_INFO,REDIRECT_URL', 'URL_REQUEST_URI' => 'REQUEST_URI', 'URL_HTML_SUFFIX' => '.html', 'URL_DENY_SUFFIX' => 'ico|png|gif|jpg', 'URL_PARAMS_BIND' => true, 'URL_PARAMS_BIND_TYPE' => 0, 'URL_PARAMS_FILTER' => false, 'URL_PARAMS_FILTER_TYPE' => '', 'URL_ROUTER_ON' => false, 'URL_ROUTE_RULES' => array ( ), 'URL_MAP_RULES' => array ( ), 'VAR_MODULE' => 'm', 'VAR_ADDON' => 'addon', 'VAR_CONTROLLER' => 'c', 'VAR_ACTION' => 'a', 'VAR_AJAX_SUBMIT' => 'ajax', 'VAR_JSONP_HANDLER' => 'callback', 'VAR_PATHINFO' => 's', 'VAR_TEMPLATE' => 't', 'HTTP_CACHE_CONTROL' => 'private', 'CHECK_APP_DIR' => true, 'FILE_UPLOAD_TYPE' => 'Local', 'DATA_CRYPT_TYPE' => 'Think', 'USER_THEME' => 'new', 'SITE_NAME' => 'Gxlcms听书', 'SITE_PATH' => '/lianxi1/gxlcms_xin_v1.1.0627/', 'SITE_URL' => 'http://127.0.0.14/', 'SITE_ICP' => '粤ICP备88888888号', 'SITE_EMAIL' => '88888888@qq.com', 'SITE_KEYWORDS' => 'Gxlcms听书', 'SITE_DESCRIPTION' => 'Gxlcms听书', 'SITE_HOT' => '', 'SITE_TONGJI' => '', 'SITE_COPYRIGHT' => '', 'ADMIN_ORDER_TYPE' => 'addtime', 'ADMIN_TIME_EDIT' => true, 'ADMIN_ADS_FILE' => 'Runtime/ad', 'URL_NUM_ADMIN' => '15', 'HOME_PAGENUM' => '15', 'URL_HTML' => '0', 'HTML_FILE_SUFFIX' => '.html', 'URL_HTML_LIST' => '0', 'URL_TINGLIST' => '', 'URL_NEWSLIST' => '', 'URL_TINGDATA' => '', 'URL_NEWSDATA' => '', 'URL_HTML_PLAY' => '0', 'URL_PLAY' => '', 'URL_SPECIAL' => '', 'URL_SPECIALDATA' => '', 'URL_TINGNEWSDATA' => '', 'URL_MAP' => '', 'URL_MYTEMPLATE' => '', 'URL_TIME' => '', 'URL_NUMBER' => '', 'URL_REWRITE' => '0', 'REWRITE_TINGLIST' => '/$listdir/index$page', 'REWRITE_TINGDETAIL' => '/$listdir/$pinyin/index', 'REWRITE_TINGNEWS' => '/$pinyin/news/index$page', 'REWRITE_TINGPLAY' => '/$listdir/$pinyin/$sid-$pid', 'REWRITE_TINGSEARCH' => '/ting-search-wd-$wd-p-$page', 'REWRITE_TINGTYPE' => '/$listdir/index_$page_$mcid_$lz_$year_$letter_$order_$area_$picm', 'REWRITE_TINGTAG' => '/tag-ting-wd-$wd-p-$page', 'REWRITE_NEWSLIST' => '/news-show-id-$id-p-$page', 'REWRITE_NEWSDETAIL' => '/news-read-id-$id', 'REWRITE_NEWSSEARCH' => '/news-search-wd-$wd-p-$page', 'REWRITE_NEWSTAG' => '/tag-shown-wd-$wd-p-$page', 'REWRITE_SPECIALLIST' => '/special-show-p-$page', 'REWRITE_SPECIALDETAIL' => '/special-read-id-$id', 'REWRITE_GUESTBOOK' => '/gb-show-p-$page', 'REWRITE_MAP' => '/map-show-id-$id-limit-$limit', 'REWRITE_MYTEMPLATE' => '/$id', 'DATA_CACHE_TING' => '0', 'DATA_CACHE_NEWS' => '0', 'DATA_CACHE_SPECIAL' => '0', 'DATA_CACHE_TINGFOREACH' => '0', 'DATA_CACHE_NEWSFOREACH' => '0', 'DATA_CACHE_SPECIALFOREACH' => '0', 'DATA_CACHE_ALL' => '0', 'HTML_CACHE_ON' => false, 'HTML_CACHE_INDEX' => '1', 'HTML_CACHE_LIST' => '1', 'HTML_CACHE_CONTENT' => '1', 'HTML_CACHE_PLAY' => '1', 'HTML_CACHE_AJAX' => '1', 'UPLOAD_PATH' => 'flie', 'UPLOAD_STYLE' => 'Y-m-d', 'UPLOAD_CLASS' => 'jpg,gif,png,jpeg,mp3,m4a', 'UPLOAD_HTTP_DOWN' => '30', 'UPLOAD_HTTP' => false, 'UPLOAD_HTTP_NEWS' => '0', 'UPLOAD_THUMB' => false, 'UPLOAD_THUMB_W' => '', 'UPLOAD_THUMB_H' => '', 'UPLOAD_THUMB_POS' => '1', 'UPLOAD_WATER' => false, 'UPLOAD_WATER_PCT' => '', 'UPLOAD_WATER_POS' => '0', 'UPLOAD_WATER_IMG' => '', 'UPLOAD_FTP' => false, 'UPLOAD_FTP_DEL' => '0', 'UPLOAD_FTP_HOST' => '', 'UPLOAD_FTP_USER' => '', 'UPLOAD_FTP_PASS' => '', 'UPLOAD_FTP_PORT' => '', 'UPLOAD_FTP_DIR' => '', 'UPLOAD_HTTP_PREFIX' => '', 'PLAY_SERVER' => array ( 'ting' => 'ting.gxlcms.com', ), 'NEWS_PIC' => '1', 'CAI_BAIDUTUI' => '1', 'BAIDU_TUI' => '', 'PLAY_COLLECT' => true, 'RAND_TAG' => '1', 'PLAY_COLLECT_NAME' => '0', 'PLAY_COLLECT_TIME' => '2', 'RAND_HITS' => '10', 'RAND_UPDOWN' => '10', 'RAND_GOLD' => '1', 'RAND_GOLDER' => '10', 'USER_SECOND' => '', 'USER_GBNUM' => '', 'USER_CMNUM' => '', 'USER_REPLACE' => '', 'PLAY_COLLECT_CONTENT' => array ( 0 => '', ), 'PLAY_SECOND' => 0, 'USER_GBCM' => false, 'HTML_CACHE_TIME' => 0, 'HTML_CACHE_RULES' => array ( 'home:index:index' => array ( 0 => '{:action}', 1 => 3600, ), 'home:ting:show' => array ( 0 => '{:controller}_{:action}/{$_SERVER.REQUEST_URI|md5}', 1 => 3600, ), 'home:news:show' => array ( 0 => '{:controller}_{:action}/{$_SERVER.REQUEST_URI|md5}', 1 => 3600, ), 'home:ting:read' => array ( 0 => '{:controller}_{:action}/{name|get_small_id_by_name}{id|get_small_id}/{name|gettingidmd}{id|getmd5}', 1 => 3600, ), 'home:news:read' => array ( 0 => '{:controller}_{:action}/{$_SERVER.REQUEST_URI|md5}', 1 => 3600, ), 'home:ting:play' => array ( 0 => '{:controller}_{:action}/{name|get_small_id_by_name}{id|get_small_id}/{name|gettingid}{id}/{$_SERVER.REQUEST_URI|md5}', 1 => 3600, ), 'home:my:show' => array ( 0 => '{:controller}_{:action}/{$_SERVER.REQUEST_URI|md5}', 1 => 3600, ), 'home:special:read' => array ( 0 => '{:controller}_{:action}/{$_SERVER.REQUEST_URI|md5}', 1 => 3600, ), 'home:story:read' => NULL, 'home:story:show' => NULL, 'home:actor:show' => NULL, 'home:actor:read' => NULL, ), 'DATA_CACHE_FOREACH' => '5b32fe9b973ec', 'USER_AUTH_KEY' => 'gxlcmsting', 'NOT_AUTH_ACTION' => 'index,top,left,main', 'REQUIRE_AUTH_MODULE' => 'Admin,List,Ting,News,User,Collect,Data,Upload,Link,Ads,Cache,Create,Template,Cm,Gb,Tag,Special,Nav,Side,Pic', 'MODULE_ALLOW_LIST' => array ( 0 => 'Admin', 1 => 'Home', 2 => 'Plus', ), 'VIEW_PATH' => './Template/', 'USER_THEME_PATH' => './Public/user/', 'LANG_SWITCH_ON' => true, 'LANG_AUTO_DETECT' => false, 'PLAY_PLAYER' => array ( 'ting' => array ( 0 => '01', 1 => '云播放', ), ), ));Think\Hook::import(array ( 'agxl_init' => array ( 0 => 'Behavior\\BuildLiteBehavior', ), 'agxl_begin' => array ( 0 => 'Behavior\\ReadHtmlCacheBehavior', 1 => 'Behavior\\CheckLangBehavior', ), 'agxl_end' => array ( 0 => 'Behavior\\ShowPageTraceBehavior', ), 'view_parse' => array ( 0 => 'Behavior\\ParseTemplateBehavior', ), 'template_filter' => array ( 0 => 'Behavior\\ContentReplaceBehavior', ), 'view_filter' => array ( 0 => 'Behavior\\WriteHtmlCacheBehavior', ), ));}